// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desctop.proto

#include "desctop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_desctop_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_desctop_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_desctop_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeviceSetInfo_desctop_2eproto;
namespace proto {
namespace desctop {
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class DeviceSetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceSetInfo> _instance;
} _DeviceSetInfo_default_instance_;
class DesctopInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DesctopInfo> _instance;
} _DesctopInfo_default_instance_;
}  // namespace desctop
}  // namespace proto
static void InitDefaultsDeviceInfo_desctop_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::desctop::_DeviceInfo_default_instance_;
    new (ptr) ::proto::desctop::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::desctop::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_desctop_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo_desctop_2eproto}, {}};

static void InitDefaultsDeviceSetInfo_desctop_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::desctop::_DeviceSetInfo_default_instance_;
    new (ptr) ::proto::desctop::DeviceSetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::desctop::DeviceSetInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceSetInfo_desctop_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceSetInfo_desctop_2eproto}, {
      &scc_info_DeviceInfo_desctop_2eproto.base,}};

static void InitDefaultsDesctopInfo_desctop_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::desctop::_DesctopInfo_default_instance_;
    new (ptr) ::proto::desctop::DesctopInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::desctop::DesctopInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DesctopInfo_desctop_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDesctopInfo_desctop_2eproto}, {
      &scc_info_DeviceSetInfo_desctop_2eproto.base,}};

void InitDefaults_desctop_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo_desctop_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceSetInfo_desctop_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DesctopInfo_desctop_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_desctop_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_desctop_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_desctop_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_desctop_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceInfo, serial_number_),
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceInfo, ddc_type_count_),
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceInfo, channel_count_),
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceInfo, interface_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceSetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DeviceSetInfo, device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DesctopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::desctop::DesctopInfo, device_set_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::desctop::DeviceInfo)},
  { 9, -1, sizeof(::proto::desctop::DeviceSetInfo)},
  { 15, -1, sizeof(::proto::desctop::DesctopInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::desctop::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::desctop::_DeviceSetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::desctop::_DesctopInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_desctop_2eproto = {
  {}, AddDescriptors_desctop_2eproto, "desctop.proto", schemas,
  file_default_instances, TableStruct_desctop_2eproto::offsets,
  file_level_metadata_desctop_2eproto, 3, file_level_enum_descriptors_desctop_2eproto, file_level_service_descriptors_desctop_2eproto,
};

const char descriptor_table_protodef_desctop_2eproto[] =
  "\n\rdesctop.proto\022\rproto.desctop\"j\n\nDevice"
  "Info\022\025\n\rserial_number\030\001 \001(\t\022\026\n\016ddc_type_"
  "count\030\002 \001(\007\022\025\n\rchannel_count\030\003 \001(\007\022\026\n\016in"
  "terface_type\030\004 \001(\t\"\?\n\rDeviceSetInfo\022.\n\013d"
  "evice_info\030\001 \003(\0132\031.proto.desctop.DeviceI"
  "nfo\"D\n\013DesctopInfo\0225\n\017device_set_info\030\001 "
  "\003(\0132\034.proto.desctop.DeviceSetInfob\006proto"
  "3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_desctop_2eproto = {
  false, InitDefaults_desctop_2eproto, 
  descriptor_table_protodef_desctop_2eproto,
  "desctop.proto", &assign_descriptors_table_desctop_2eproto, 281,
};

void AddDescriptors_desctop_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_desctop_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_desctop_2eproto = []() { AddDescriptors_desctop_2eproto(); return true; }();
namespace proto {
namespace desctop {

// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kSerialNumberFieldNumber;
const int DeviceInfo::kDdcTypeCountFieldNumber;
const int DeviceInfo::kChannelCountFieldNumber;
const int DeviceInfo::kInterfaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.desctop.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  ::memcpy(&ddc_type_count_, &from.ddc_type_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_count_) -
    reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  // @@protoc_insertion_point(copy_constructor:proto.desctop.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceInfo_desctop_2eproto.base);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:proto.desctop.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceInfo_desctop_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.desctop.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string serial_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.desctop.DeviceInfo.serial_number");
        object = msg->mutable_serial_number();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ddc_type_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_channel_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // string interface_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.desctop.DeviceInfo.interface_type");
        object = msg->mutable_interface_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.desctop.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.desctop.DeviceInfo.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ddc_type_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.desctop.DeviceInfo.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.desctop.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.desctop.DeviceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.desctop.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.desctop.DeviceInfo.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ddc_type_count(), output);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->channel_count(), output);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.desctop.DeviceInfo.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->interface_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.desctop.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.desctop.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.desctop.DeviceInfo.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ddc_type_count(), target);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->channel_count(), target);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.desctop.DeviceInfo.interface_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->interface_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.desctop.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.desctop.DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.desctop.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.desctop.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.desctop.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.desctop.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.ddc_type_count() != 0) {
    set_ddc_type_count(from.ddc_type_count());
  }
  if (from.channel_count() != 0) {
    set_channel_count(from.channel_count());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.desctop.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.desctop.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_type_.Swap(&other->interface_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ddc_type_count_, other->ddc_type_count_);
  swap(channel_count_, other->channel_count_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_desctop_2eproto);
  return ::file_level_metadata_desctop_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeviceSetInfo::InitAsDefaultInstance() {
}
class DeviceSetInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceSetInfo::kDeviceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceSetInfo::DeviceSetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.desctop.DeviceSetInfo)
}
DeviceSetInfo::DeviceSetInfo(const DeviceSetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      device_info_(from.device_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.desctop.DeviceSetInfo)
}

void DeviceSetInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceSetInfo_desctop_2eproto.base);
}

DeviceSetInfo::~DeviceSetInfo() {
  // @@protoc_insertion_point(destructor:proto.desctop.DeviceSetInfo)
  SharedDtor();
}

void DeviceSetInfo::SharedDtor() {
}

void DeviceSetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceSetInfo& DeviceSetInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceSetInfo_desctop_2eproto.base);
  return *internal_default_instance();
}


void DeviceSetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.desctop.DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceSetInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceSetInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.desctop.DeviceInfo device_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::desctop::DeviceInfo::_InternalParse;
          object = msg->add_device_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceSetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.desctop.DeviceSetInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.desctop.DeviceInfo device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.desctop.DeviceSetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.desctop.DeviceSetInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceSetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.desctop.DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.desctop.DeviceInfo device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.desctop.DeviceSetInfo)
}

::google::protobuf::uint8* DeviceSetInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.desctop.DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.desctop.DeviceInfo device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.desctop.DeviceSetInfo)
  return target;
}

size_t DeviceSetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.desctop.DeviceSetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.desctop.DeviceInfo device_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.desctop.DeviceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSetInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceSetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.desctop.DeviceSetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.desctop.DeviceSetInfo)
    MergeFrom(*source);
  }
}

void DeviceSetInfo::MergeFrom(const DeviceSetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.desctop.DeviceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_info_.MergeFrom(from.device_info_);
}

void DeviceSetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.desctop.DeviceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSetInfo::CopyFrom(const DeviceSetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.desctop.DeviceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSetInfo::IsInitialized() const {
  return true;
}

void DeviceSetInfo::Swap(DeviceSetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceSetInfo::InternalSwap(DeviceSetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_info_)->InternalSwap(CastToBase(&other->device_info_));
}

::google::protobuf::Metadata DeviceSetInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_desctop_2eproto);
  return ::file_level_metadata_desctop_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DesctopInfo::InitAsDefaultInstance() {
}
class DesctopInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesctopInfo::kDeviceSetInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesctopInfo::DesctopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.desctop.DesctopInfo)
}
DesctopInfo::DesctopInfo(const DesctopInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      device_set_info_(from.device_set_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.desctop.DesctopInfo)
}

void DesctopInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DesctopInfo_desctop_2eproto.base);
}

DesctopInfo::~DesctopInfo() {
  // @@protoc_insertion_point(destructor:proto.desctop.DesctopInfo)
  SharedDtor();
}

void DesctopInfo::SharedDtor() {
}

void DesctopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DesctopInfo& DesctopInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DesctopInfo_desctop_2eproto.base);
  return *internal_default_instance();
}


void DesctopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.desctop.DesctopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_set_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DesctopInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DesctopInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.desctop.DeviceSetInfo device_set_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::desctop::DeviceSetInfo::_InternalParse;
          object = msg->add_device_set_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DesctopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.desctop.DesctopInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.desctop.DeviceSetInfo device_set_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_set_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.desctop.DesctopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.desctop.DesctopInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DesctopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.desctop.DesctopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.desctop.DeviceSetInfo device_set_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_set_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_set_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.desctop.DesctopInfo)
}

::google::protobuf::uint8* DesctopInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.desctop.DesctopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.desctop.DeviceSetInfo device_set_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_set_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_set_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.desctop.DesctopInfo)
  return target;
}

size_t DesctopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.desctop.DesctopInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.desctop.DeviceSetInfo device_set_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_set_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_set_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DesctopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.desctop.DesctopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DesctopInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DesctopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.desctop.DesctopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.desctop.DesctopInfo)
    MergeFrom(*source);
  }
}

void DesctopInfo::MergeFrom(const DesctopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.desctop.DesctopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_set_info_.MergeFrom(from.device_set_info_);
}

void DesctopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.desctop.DesctopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DesctopInfo::CopyFrom(const DesctopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.desctop.DesctopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesctopInfo::IsInitialized() const {
  return true;
}

void DesctopInfo::Swap(DesctopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesctopInfo::InternalSwap(DesctopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_set_info_)->InternalSwap(CastToBase(&other->device_set_info_));
}

::google::protobuf::Metadata DesctopInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_desctop_2eproto);
  return ::file_level_metadata_desctop_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace desctop
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::desctop::DeviceInfo* Arena::CreateMaybeMessage< ::proto::desctop::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::desctop::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::desctop::DeviceSetInfo* Arena::CreateMaybeMessage< ::proto::desctop::DeviceSetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::desctop::DeviceSetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::desctop::DesctopInfo* Arena::CreateMaybeMessage< ::proto::desctop::DesctopInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::desctop::DesctopInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
