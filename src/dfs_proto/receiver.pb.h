// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: receiver.proto

#ifndef PROTOBUF_INCLUDED_receiver_2eproto
#define PROTOBUF_INCLUDED_receiver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_receiver_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_receiver_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_receiver_2eproto();
namespace proto {
namespace receiver {
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class ClientToHost;
class ClientToHostDefaultTypeInternal;
extern ClientToHostDefaultTypeInternal _ClientToHost_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceSetInfo;
class DeviceSetInfoDefaultTypeInternal;
extern DeviceSetInfoDefaultTypeInternal _DeviceSetInfo_default_instance_;
class HostToClient;
class HostToClientDefaultTypeInternal;
extern HostToClientDefaultTypeInternal _HostToClient_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Preselectors;
class PreselectorsDefaultTypeInternal;
extern PreselectorsDefaultTypeInternal _Preselectors_default_instance_;
class ShiftPhaseDDC1;
class ShiftPhaseDDC1DefaultTypeInternal;
extern ShiftPhaseDDC1DefaultTypeInternal _ShiftPhaseDDC1_default_instance_;
}  // namespace receiver
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::receiver::Answer* Arena::CreateMaybeMessage<::proto::receiver::Answer>(Arena*);
template<> ::proto::receiver::ClientToHost* Arena::CreateMaybeMessage<::proto::receiver::ClientToHost>(Arena*);
template<> ::proto::receiver::Command* Arena::CreateMaybeMessage<::proto::receiver::Command>(Arena*);
template<> ::proto::receiver::DeviceInfo* Arena::CreateMaybeMessage<::proto::receiver::DeviceInfo>(Arena*);
template<> ::proto::receiver::DeviceSetInfo* Arena::CreateMaybeMessage<::proto::receiver::DeviceSetInfo>(Arena*);
template<> ::proto::receiver::HostToClient* Arena::CreateMaybeMessage<::proto::receiver::HostToClient>(Arena*);
template<> ::proto::receiver::Packet* Arena::CreateMaybeMessage<::proto::receiver::Packet>(Arena*);
template<> ::proto::receiver::Preselectors* Arena::CreateMaybeMessage<::proto::receiver::Preselectors>(Arena*);
template<> ::proto::receiver::ShiftPhaseDDC1* Arena::CreateMaybeMessage<::proto::receiver::ShiftPhaseDDC1>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace receiver {

enum CommandType {
  UNKNOWN_COMMAND = 0,
  SET_POWER_ON = 1,
  SET_POWER_OFF = 2,
  SET_ATTENUATOR = 3,
  SET_PRESELECTORS = 4,
  SET_PREAMPLIFIER_ENABLED = 5,
  SET_ADC_NOICE_BLANKER_ENABLED = 6,
  SET_ADC_NOICE_BLANKER_THRESHOLD = 7,
  SET_DDC1_FREQUENCY = 8,
  SET_DDC1_TYPE = 9,
  SET_SETTINGS = 10,
  START_DDC1 = 11,
  STOP_DDC1 = 12,
  SET_SHIFT_PHASE_DDC = 13,
  SET_DEVICE_INDEX = 14,
  SET_DEVICE_MODE = 15,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = UNKNOWN_COMMAND;
const CommandType CommandType_MAX = SET_DEVICE_MODE;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
enum DeviceMode {
  DM_UNKNOWN = 0,
  DM_COHERENT = 1,
  DM_SINGLE = 2,
  DeviceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DeviceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DeviceMode_IsValid(int value);
const DeviceMode DeviceMode_MIN = DM_UNKNOWN;
const DeviceMode DeviceMode_MAX = DM_SINGLE;
const int DeviceMode_ARRAYSIZE = DeviceMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceMode_descriptor();
inline const ::std::string& DeviceMode_Name(DeviceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceMode_descriptor(), value);
}
inline bool DeviceMode_Parse(
    const ::std::string& name, DeviceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceMode>(
    DeviceMode_descriptor(), name, value);
}
// ===================================================================

class Preselectors :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.Preselectors) */ {
 public:
  Preselectors();
  virtual ~Preselectors();

  Preselectors(const Preselectors& from);

  inline Preselectors& operator=(const Preselectors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Preselectors(Preselectors&& from) noexcept
    : Preselectors() {
    *this = ::std::move(from);
  }

  inline Preselectors& operator=(Preselectors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Preselectors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Preselectors* internal_default_instance() {
    return reinterpret_cast<const Preselectors*>(
               &_Preselectors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Preselectors* other);
  friend void swap(Preselectors& a, Preselectors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Preselectors* New() const final {
    return CreateMaybeMessage<Preselectors>(nullptr);
  }

  Preselectors* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Preselectors>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Preselectors& from);
  void MergeFrom(const Preselectors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Preselectors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 low_frequency = 1;
  void clear_low_frequency();
  static const int kLowFrequencyFieldNumber = 1;
  ::google::protobuf::uint32 low_frequency() const;
  void set_low_frequency(::google::protobuf::uint32 value);

  // uint32 high_frequency = 2;
  void clear_high_frequency();
  static const int kHighFrequencyFieldNumber = 2;
  ::google::protobuf::uint32 high_frequency() const;
  void set_high_frequency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.receiver.Preselectors)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 low_frequency_;
  ::google::protobuf::uint32 high_frequency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class ShiftPhaseDDC1 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.ShiftPhaseDDC1) */ {
 public:
  ShiftPhaseDDC1();
  virtual ~ShiftPhaseDDC1();

  ShiftPhaseDDC1(const ShiftPhaseDDC1& from);

  inline ShiftPhaseDDC1& operator=(const ShiftPhaseDDC1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShiftPhaseDDC1(ShiftPhaseDDC1&& from) noexcept
    : ShiftPhaseDDC1() {
    *this = ::std::move(from);
  }

  inline ShiftPhaseDDC1& operator=(ShiftPhaseDDC1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ShiftPhaseDDC1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShiftPhaseDDC1* internal_default_instance() {
    return reinterpret_cast<const ShiftPhaseDDC1*>(
               &_ShiftPhaseDDC1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ShiftPhaseDDC1* other);
  friend void swap(ShiftPhaseDDC1& a, ShiftPhaseDDC1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShiftPhaseDDC1* New() const final {
    return CreateMaybeMessage<ShiftPhaseDDC1>(nullptr);
  }

  ShiftPhaseDDC1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShiftPhaseDDC1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShiftPhaseDDC1& from);
  void MergeFrom(const ShiftPhaseDDC1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftPhaseDDC1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double phase_shift = 2;
  void clear_phase_shift();
  static const int kPhaseShiftFieldNumber = 2;
  double phase_shift() const;
  void set_phase_shift(double value);

  // uint32 device_index = 1;
  void clear_device_index();
  static const int kDeviceIndexFieldNumber = 1;
  ::google::protobuf::uint32 device_index() const;
  void set_device_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.receiver.ShiftPhaseDDC1)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double phase_shift_;
  ::google::protobuf::uint32 device_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes adc_noice_blanker_threshold = 6;
  void clear_adc_noice_blanker_threshold();
  static const int kAdcNoiceBlankerThresholdFieldNumber = 6;
  const ::std::string& adc_noice_blanker_threshold() const;
  void set_adc_noice_blanker_threshold(const ::std::string& value);
  #if LANG_CXX11
  void set_adc_noice_blanker_threshold(::std::string&& value);
  #endif
  void set_adc_noice_blanker_threshold(const char* value);
  void set_adc_noice_blanker_threshold(const void* value, size_t size);
  ::std::string* mutable_adc_noice_blanker_threshold();
  ::std::string* release_adc_noice_blanker_threshold();
  void set_allocated_adc_noice_blanker_threshold(::std::string* adc_noice_blanker_threshold);

  // .proto.receiver.Preselectors preselectors = 3;
  bool has_preselectors() const;
  void clear_preselectors();
  static const int kPreselectorsFieldNumber = 3;
  const ::proto::receiver::Preselectors& preselectors() const;
  ::proto::receiver::Preselectors* release_preselectors();
  ::proto::receiver::Preselectors* mutable_preselectors();
  void set_allocated_preselectors(::proto::receiver::Preselectors* preselectors);

  // .proto.receiver.ShiftPhaseDDC1 shift_phase_ddc1 = 11;
  bool has_shift_phase_ddc1() const;
  void clear_shift_phase_ddc1();
  static const int kShiftPhaseDdc1FieldNumber = 11;
  const ::proto::receiver::ShiftPhaseDDC1& shift_phase_ddc1() const;
  ::proto::receiver::ShiftPhaseDDC1* release_shift_phase_ddc1();
  ::proto::receiver::ShiftPhaseDDC1* mutable_shift_phase_ddc1();
  void set_allocated_shift_phase_ddc1(::proto::receiver::ShiftPhaseDDC1* shift_phase_ddc1);

  // .proto.receiver.CommandType command_type = 1;
  void clear_command_type();
  static const int kCommandTypeFieldNumber = 1;
  ::proto::receiver::CommandType command_type() const;
  void set_command_type(::proto::receiver::CommandType value);

  // uint32 attenuator = 2;
  void clear_attenuator();
  static const int kAttenuatorFieldNumber = 2;
  ::google::protobuf::uint32 attenuator() const;
  void set_attenuator(::google::protobuf::uint32 value);

  // bool preamplifier_enebled = 4;
  void clear_preamplifier_enebled();
  static const int kPreamplifierEnebledFieldNumber = 4;
  bool preamplifier_enebled() const;
  void set_preamplifier_enebled(bool value);

  // bool adc_noice_blanker_enebled = 5;
  void clear_adc_noice_blanker_enebled();
  static const int kAdcNoiceBlankerEnebledFieldNumber = 5;
  bool adc_noice_blanker_enebled() const;
  void set_adc_noice_blanker_enebled(bool value);

  // bool start_ddc1 = 9;
  void clear_start_ddc1();
  static const int kStartDdc1FieldNumber = 9;
  bool start_ddc1() const;
  void set_start_ddc1(bool value);

  // uint32 ddc1_frequency = 7;
  void clear_ddc1_frequency();
  static const int kDdc1FrequencyFieldNumber = 7;
  ::google::protobuf::uint32 ddc1_frequency() const;
  void set_ddc1_frequency(::google::protobuf::uint32 value);

  // uint32 ddc1_type = 8;
  void clear_ddc1_type();
  static const int kDdc1TypeFieldNumber = 8;
  ::google::protobuf::uint32 ddc1_type() const;
  void set_ddc1_type(::google::protobuf::uint32 value);

  // uint32 samples_per_buffer = 10;
  void clear_samples_per_buffer();
  static const int kSamplesPerBufferFieldNumber = 10;
  ::google::protobuf::uint32 samples_per_buffer() const;
  void set_samples_per_buffer(::google::protobuf::uint32 value);

  // uint32 device_set_index = 12;
  void clear_device_set_index();
  static const int kDeviceSetIndexFieldNumber = 12;
  ::google::protobuf::uint32 device_set_index() const;
  void set_device_set_index(::google::protobuf::uint32 value);

  // .proto.receiver.DeviceMode device_mode = 13;
  void clear_device_mode();
  static const int kDeviceModeFieldNumber = 13;
  ::proto::receiver::DeviceMode device_mode() const;
  void set_device_mode(::proto::receiver::DeviceMode value);

  // @@protoc_insertion_point(class_scope:proto.receiver.Command)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr adc_noice_blanker_threshold_;
  ::proto::receiver::Preselectors* preselectors_;
  ::proto::receiver::ShiftPhaseDDC1* shift_phase_ddc1_;
  int command_type_;
  ::google::protobuf::uint32 attenuator_;
  bool preamplifier_enebled_;
  bool adc_noice_blanker_enebled_;
  bool start_ddc1_;
  ::google::protobuf::uint32 ddc1_frequency_;
  ::google::protobuf::uint32 ddc1_type_;
  ::google::protobuf::uint32 samples_per_buffer_;
  ::google::protobuf::uint32 device_set_index_;
  int device_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serial_number = 1;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // string interface_type = 4;
  void clear_interface_type();
  static const int kInterfaceTypeFieldNumber = 4;
  const ::std::string& interface_type() const;
  void set_interface_type(const ::std::string& value);
  #if LANG_CXX11
  void set_interface_type(::std::string&& value);
  #endif
  void set_interface_type(const char* value);
  void set_interface_type(const char* value, size_t size);
  ::std::string* mutable_interface_type();
  ::std::string* release_interface_type();
  void set_allocated_interface_type(::std::string* interface_type);

  // fixed32 ddc_type_count = 2;
  void clear_ddc_type_count();
  static const int kDdcTypeCountFieldNumber = 2;
  ::google::protobuf::uint32 ddc_type_count() const;
  void set_ddc_type_count(::google::protobuf::uint32 value);

  // fixed32 channel_count = 3;
  void clear_channel_count();
  static const int kChannelCountFieldNumber = 3;
  ::google::protobuf::uint32 channel_count() const;
  void set_channel_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.receiver.DeviceInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr interface_type_;
  ::google::protobuf::uint32 ddc_type_count_;
  ::google::protobuf::uint32 channel_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class DeviceSetInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.DeviceSetInfo) */ {
 public:
  DeviceSetInfo();
  virtual ~DeviceSetInfo();

  DeviceSetInfo(const DeviceSetInfo& from);

  inline DeviceSetInfo& operator=(const DeviceSetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceSetInfo(DeviceSetInfo&& from) noexcept
    : DeviceSetInfo() {
    *this = ::std::move(from);
  }

  inline DeviceSetInfo& operator=(DeviceSetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeviceSetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceSetInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceSetInfo*>(
               &_DeviceSetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceSetInfo* other);
  friend void swap(DeviceSetInfo& a, DeviceSetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceSetInfo* New() const final {
    return CreateMaybeMessage<DeviceSetInfo>(nullptr);
  }

  DeviceSetInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSetInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceSetInfo& from);
  void MergeFrom(const DeviceSetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.receiver.DeviceInfo device_info = 1;
  int device_info_size() const;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 1;
  ::proto::receiver::DeviceInfo* mutable_device_info(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::receiver::DeviceInfo >*
      mutable_device_info();
  const ::proto::receiver::DeviceInfo& device_info(int index) const;
  ::proto::receiver::DeviceInfo* add_device_info();
  const ::google::protobuf::RepeatedPtrField< ::proto::receiver::DeviceInfo >&
      device_info() const;

  // @@protoc_insertion_point(class_scope:proto.receiver.DeviceSetInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::receiver::DeviceInfo > device_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class Answer :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.Answer) */ {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Answer* other);
  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const final {
    return CreateMaybeMessage<Answer>(nullptr);
  }

  Answer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.receiver.CommandType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::receiver::CommandType type() const;
  void set_type(::proto::receiver::CommandType value);

  // bool succesed = 2;
  void clear_succesed();
  static const int kSuccesedFieldNumber = 2;
  bool succesed() const;
  void set_succesed(bool value);

  // @@protoc_insertion_point(class_scope:proto.receiver.Answer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  bool succesed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class Packet :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float sample = 11;
  int sample_size() const;
  void clear_sample();
  static const int kSampleFieldNumber = 11;
  float sample(int index) const;
  void set_sample(int index, float value);
  void add_sample(float value);
  const ::google::protobuf::RepeatedField< float >&
      sample() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_sample();

  // uint32 block_number = 1;
  void clear_block_number();
  static const int kBlockNumberFieldNumber = 1;
  ::google::protobuf::uint32 block_number() const;
  void set_block_number(::google::protobuf::uint32 value);

  // uint32 ddc1_frequency = 2;
  void clear_ddc1_frequency();
  static const int kDdc1FrequencyFieldNumber = 2;
  ::google::protobuf::uint32 ddc1_frequency() const;
  void set_ddc1_frequency(::google::protobuf::uint32 value);

  // uint32 attenuator = 3;
  void clear_attenuator();
  static const int kAttenuatorFieldNumber = 3;
  ::google::protobuf::uint32 attenuator() const;
  void set_attenuator(::google::protobuf::uint32 value);

  // uint32 block_size = 4;
  void clear_block_size();
  static const int kBlockSizeFieldNumber = 4;
  ::google::protobuf::uint32 block_size() const;
  void set_block_size(::google::protobuf::uint32 value);

  // uint32 device_count = 5;
  void clear_device_count();
  static const int kDeviceCountFieldNumber = 5;
  ::google::protobuf::uint32 device_count() const;
  void set_device_count(::google::protobuf::uint32 value);

  // uint32 sample_rate = 6;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 6;
  ::google::protobuf::uint32 sample_rate() const;
  void set_sample_rate(::google::protobuf::uint32 value);

  // uint32 time_of_week = 7;
  void clear_time_of_week();
  static const int kTimeOfWeekFieldNumber = 7;
  ::google::protobuf::uint32 time_of_week() const;
  void set_time_of_week(::google::protobuf::uint32 value);

  // uint32 week_number = 8;
  void clear_week_number();
  static const int kWeekNumberFieldNumber = 8;
  ::google::protobuf::uint32 week_number() const;
  void set_week_number(::google::protobuf::uint32 value);

  // double ddc_sample_counter = 9;
  void clear_ddc_sample_counter();
  static const int kDdcSampleCounterFieldNumber = 9;
  double ddc_sample_counter() const;
  void set_ddc_sample_counter(double value);

  // uint64 adc_period_counter = 10;
  void clear_adc_period_counter();
  static const int kAdcPeriodCounterFieldNumber = 10;
  ::google::protobuf::uint64 adc_period_counter() const;
  void set_adc_period_counter(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.receiver.Packet)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > sample_;
  mutable std::atomic<int> _sample_cached_byte_size_;
  ::google::protobuf::uint32 block_number_;
  ::google::protobuf::uint32 ddc1_frequency_;
  ::google::protobuf::uint32 attenuator_;
  ::google::protobuf::uint32 block_size_;
  ::google::protobuf::uint32 device_count_;
  ::google::protobuf::uint32 sample_rate_;
  ::google::protobuf::uint32 time_of_week_;
  ::google::protobuf::uint32 week_number_;
  double ddc_sample_counter_;
  ::google::protobuf::uint64 adc_period_counter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class HostToClient :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.HostToClient) */ {
 public:
  HostToClient();
  virtual ~HostToClient();

  HostToClient(const HostToClient& from);

  inline HostToClient& operator=(const HostToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostToClient(HostToClient&& from) noexcept
    : HostToClient() {
    *this = ::std::move(from);
  }

  inline HostToClient& operator=(HostToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HostToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostToClient* internal_default_instance() {
    return reinterpret_cast<const HostToClient*>(
               &_HostToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(HostToClient* other);
  friend void swap(HostToClient& a, HostToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostToClient* New() const final {
    return CreateMaybeMessage<HostToClient>(nullptr);
  }

  HostToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HostToClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HostToClient& from);
  void MergeFrom(const HostToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.receiver.DeviceSetInfo device_set_info = 1;
  bool has_device_set_info() const;
  void clear_device_set_info();
  static const int kDeviceSetInfoFieldNumber = 1;
  const ::proto::receiver::DeviceSetInfo& device_set_info() const;
  ::proto::receiver::DeviceSetInfo* release_device_set_info();
  ::proto::receiver::DeviceSetInfo* mutable_device_set_info();
  void set_allocated_device_set_info(::proto::receiver::DeviceSetInfo* device_set_info);

  // .proto.receiver.Answer command_answer = 2;
  bool has_command_answer() const;
  void clear_command_answer();
  static const int kCommandAnswerFieldNumber = 2;
  const ::proto::receiver::Answer& command_answer() const;
  ::proto::receiver::Answer* release_command_answer();
  ::proto::receiver::Answer* mutable_command_answer();
  void set_allocated_command_answer(::proto::receiver::Answer* command_answer);

  // .proto.receiver.Packet packet = 3;
  bool has_packet() const;
  void clear_packet();
  static const int kPacketFieldNumber = 3;
  const ::proto::receiver::Packet& packet() const;
  ::proto::receiver::Packet* release_packet();
  ::proto::receiver::Packet* mutable_packet();
  void set_allocated_packet(::proto::receiver::Packet* packet);

  // @@protoc_insertion_point(class_scope:proto.receiver.HostToClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::receiver::DeviceSetInfo* device_set_info_;
  ::proto::receiver::Answer* command_answer_;
  ::proto::receiver::Packet* packet_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// -------------------------------------------------------------------

class ClientToHost :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.receiver.ClientToHost) */ {
 public:
  ClientToHost();
  virtual ~ClientToHost();

  ClientToHost(const ClientToHost& from);

  inline ClientToHost& operator=(const ClientToHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientToHost(ClientToHost&& from) noexcept
    : ClientToHost() {
    *this = ::std::move(from);
  }

  inline ClientToHost& operator=(ClientToHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientToHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientToHost* internal_default_instance() {
    return reinterpret_cast<const ClientToHost*>(
               &_ClientToHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ClientToHost* other);
  friend void swap(ClientToHost& a, ClientToHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientToHost* New() const final {
    return CreateMaybeMessage<ClientToHost>(nullptr);
  }

  ClientToHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientToHost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientToHost& from);
  void MergeFrom(const ClientToHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientToHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.receiver.Command command = 1;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::proto::receiver::Command& command() const;
  ::proto::receiver::Command* release_command();
  ::proto::receiver::Command* mutable_command();
  void set_allocated_command(::proto::receiver::Command* command);

  // @@protoc_insertion_point(class_scope:proto.receiver.ClientToHost)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::receiver::Command* command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_receiver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Preselectors

// uint32 low_frequency = 1;
inline void Preselectors::clear_low_frequency() {
  low_frequency_ = 0u;
}
inline ::google::protobuf::uint32 Preselectors::low_frequency() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Preselectors.low_frequency)
  return low_frequency_;
}
inline void Preselectors::set_low_frequency(::google::protobuf::uint32 value) {
  
  low_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Preselectors.low_frequency)
}

// uint32 high_frequency = 2;
inline void Preselectors::clear_high_frequency() {
  high_frequency_ = 0u;
}
inline ::google::protobuf::uint32 Preselectors::high_frequency() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Preselectors.high_frequency)
  return high_frequency_;
}
inline void Preselectors::set_high_frequency(::google::protobuf::uint32 value) {
  
  high_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Preselectors.high_frequency)
}

// -------------------------------------------------------------------

// ShiftPhaseDDC1

// uint32 device_index = 1;
inline void ShiftPhaseDDC1::clear_device_index() {
  device_index_ = 0u;
}
inline ::google::protobuf::uint32 ShiftPhaseDDC1::device_index() const {
  // @@protoc_insertion_point(field_get:proto.receiver.ShiftPhaseDDC1.device_index)
  return device_index_;
}
inline void ShiftPhaseDDC1::set_device_index(::google::protobuf::uint32 value) {
  
  device_index_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.ShiftPhaseDDC1.device_index)
}

// double phase_shift = 2;
inline void ShiftPhaseDDC1::clear_phase_shift() {
  phase_shift_ = 0;
}
inline double ShiftPhaseDDC1::phase_shift() const {
  // @@protoc_insertion_point(field_get:proto.receiver.ShiftPhaseDDC1.phase_shift)
  return phase_shift_;
}
inline void ShiftPhaseDDC1::set_phase_shift(double value) {
  
  phase_shift_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.ShiftPhaseDDC1.phase_shift)
}

// -------------------------------------------------------------------

// Command

// .proto.receiver.CommandType command_type = 1;
inline void Command::clear_command_type() {
  command_type_ = 0;
}
inline ::proto::receiver::CommandType Command::command_type() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.command_type)
  return static_cast< ::proto::receiver::CommandType >(command_type_);
}
inline void Command::set_command_type(::proto::receiver::CommandType value) {
  
  command_type_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.command_type)
}

// uint32 attenuator = 2;
inline void Command::clear_attenuator() {
  attenuator_ = 0u;
}
inline ::google::protobuf::uint32 Command::attenuator() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.attenuator)
  return attenuator_;
}
inline void Command::set_attenuator(::google::protobuf::uint32 value) {
  
  attenuator_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.attenuator)
}

// .proto.receiver.Preselectors preselectors = 3;
inline bool Command::has_preselectors() const {
  return this != internal_default_instance() && preselectors_ != nullptr;
}
inline void Command::clear_preselectors() {
  if (GetArenaNoVirtual() == nullptr && preselectors_ != nullptr) {
    delete preselectors_;
  }
  preselectors_ = nullptr;
}
inline const ::proto::receiver::Preselectors& Command::preselectors() const {
  const ::proto::receiver::Preselectors* p = preselectors_;
  // @@protoc_insertion_point(field_get:proto.receiver.Command.preselectors)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::receiver::Preselectors*>(
      &::proto::receiver::_Preselectors_default_instance_);
}
inline ::proto::receiver::Preselectors* Command::release_preselectors() {
  // @@protoc_insertion_point(field_release:proto.receiver.Command.preselectors)
  
  ::proto::receiver::Preselectors* temp = preselectors_;
  preselectors_ = nullptr;
  return temp;
}
inline ::proto::receiver::Preselectors* Command::mutable_preselectors() {
  
  if (preselectors_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::receiver::Preselectors>(GetArenaNoVirtual());
    preselectors_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.receiver.Command.preselectors)
  return preselectors_;
}
inline void Command::set_allocated_preselectors(::proto::receiver::Preselectors* preselectors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preselectors_;
  }
  if (preselectors) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preselectors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preselectors, submessage_arena);
    }
    
  } else {
    
  }
  preselectors_ = preselectors;
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.Command.preselectors)
}

// bool preamplifier_enebled = 4;
inline void Command::clear_preamplifier_enebled() {
  preamplifier_enebled_ = false;
}
inline bool Command::preamplifier_enebled() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.preamplifier_enebled)
  return preamplifier_enebled_;
}
inline void Command::set_preamplifier_enebled(bool value) {
  
  preamplifier_enebled_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.preamplifier_enebled)
}

// bool adc_noice_blanker_enebled = 5;
inline void Command::clear_adc_noice_blanker_enebled() {
  adc_noice_blanker_enebled_ = false;
}
inline bool Command::adc_noice_blanker_enebled() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.adc_noice_blanker_enebled)
  return adc_noice_blanker_enebled_;
}
inline void Command::set_adc_noice_blanker_enebled(bool value) {
  
  adc_noice_blanker_enebled_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.adc_noice_blanker_enebled)
}

// bytes adc_noice_blanker_threshold = 6;
inline void Command::clear_adc_noice_blanker_threshold() {
  adc_noice_blanker_threshold_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::adc_noice_blanker_threshold() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.adc_noice_blanker_threshold)
  return adc_noice_blanker_threshold_.GetNoArena();
}
inline void Command::set_adc_noice_blanker_threshold(const ::std::string& value) {
  
  adc_noice_blanker_threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.receiver.Command.adc_noice_blanker_threshold)
}
#if LANG_CXX11
inline void Command::set_adc_noice_blanker_threshold(::std::string&& value) {
  
  adc_noice_blanker_threshold_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.receiver.Command.adc_noice_blanker_threshold)
}
#endif
inline void Command::set_adc_noice_blanker_threshold(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  adc_noice_blanker_threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.receiver.Command.adc_noice_blanker_threshold)
}
inline void Command::set_adc_noice_blanker_threshold(const void* value, size_t size) {
  
  adc_noice_blanker_threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.receiver.Command.adc_noice_blanker_threshold)
}
inline ::std::string* Command::mutable_adc_noice_blanker_threshold() {
  
  // @@protoc_insertion_point(field_mutable:proto.receiver.Command.adc_noice_blanker_threshold)
  return adc_noice_blanker_threshold_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_adc_noice_blanker_threshold() {
  // @@protoc_insertion_point(field_release:proto.receiver.Command.adc_noice_blanker_threshold)
  
  return adc_noice_blanker_threshold_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_adc_noice_blanker_threshold(::std::string* adc_noice_blanker_threshold) {
  if (adc_noice_blanker_threshold != nullptr) {
    
  } else {
    
  }
  adc_noice_blanker_threshold_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adc_noice_blanker_threshold);
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.Command.adc_noice_blanker_threshold)
}

// uint32 ddc1_frequency = 7;
inline void Command::clear_ddc1_frequency() {
  ddc1_frequency_ = 0u;
}
inline ::google::protobuf::uint32 Command::ddc1_frequency() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.ddc1_frequency)
  return ddc1_frequency_;
}
inline void Command::set_ddc1_frequency(::google::protobuf::uint32 value) {
  
  ddc1_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.ddc1_frequency)
}

// uint32 ddc1_type = 8;
inline void Command::clear_ddc1_type() {
  ddc1_type_ = 0u;
}
inline ::google::protobuf::uint32 Command::ddc1_type() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.ddc1_type)
  return ddc1_type_;
}
inline void Command::set_ddc1_type(::google::protobuf::uint32 value) {
  
  ddc1_type_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.ddc1_type)
}

// bool start_ddc1 = 9;
inline void Command::clear_start_ddc1() {
  start_ddc1_ = false;
}
inline bool Command::start_ddc1() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.start_ddc1)
  return start_ddc1_;
}
inline void Command::set_start_ddc1(bool value) {
  
  start_ddc1_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.start_ddc1)
}

// uint32 samples_per_buffer = 10;
inline void Command::clear_samples_per_buffer() {
  samples_per_buffer_ = 0u;
}
inline ::google::protobuf::uint32 Command::samples_per_buffer() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.samples_per_buffer)
  return samples_per_buffer_;
}
inline void Command::set_samples_per_buffer(::google::protobuf::uint32 value) {
  
  samples_per_buffer_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.samples_per_buffer)
}

// .proto.receiver.ShiftPhaseDDC1 shift_phase_ddc1 = 11;
inline bool Command::has_shift_phase_ddc1() const {
  return this != internal_default_instance() && shift_phase_ddc1_ != nullptr;
}
inline void Command::clear_shift_phase_ddc1() {
  if (GetArenaNoVirtual() == nullptr && shift_phase_ddc1_ != nullptr) {
    delete shift_phase_ddc1_;
  }
  shift_phase_ddc1_ = nullptr;
}
inline const ::proto::receiver::ShiftPhaseDDC1& Command::shift_phase_ddc1() const {
  const ::proto::receiver::ShiftPhaseDDC1* p = shift_phase_ddc1_;
  // @@protoc_insertion_point(field_get:proto.receiver.Command.shift_phase_ddc1)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::receiver::ShiftPhaseDDC1*>(
      &::proto::receiver::_ShiftPhaseDDC1_default_instance_);
}
inline ::proto::receiver::ShiftPhaseDDC1* Command::release_shift_phase_ddc1() {
  // @@protoc_insertion_point(field_release:proto.receiver.Command.shift_phase_ddc1)
  
  ::proto::receiver::ShiftPhaseDDC1* temp = shift_phase_ddc1_;
  shift_phase_ddc1_ = nullptr;
  return temp;
}
inline ::proto::receiver::ShiftPhaseDDC1* Command::mutable_shift_phase_ddc1() {
  
  if (shift_phase_ddc1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::receiver::ShiftPhaseDDC1>(GetArenaNoVirtual());
    shift_phase_ddc1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.receiver.Command.shift_phase_ddc1)
  return shift_phase_ddc1_;
}
inline void Command::set_allocated_shift_phase_ddc1(::proto::receiver::ShiftPhaseDDC1* shift_phase_ddc1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shift_phase_ddc1_;
  }
  if (shift_phase_ddc1) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shift_phase_ddc1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shift_phase_ddc1, submessage_arena);
    }
    
  } else {
    
  }
  shift_phase_ddc1_ = shift_phase_ddc1;
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.Command.shift_phase_ddc1)
}

// uint32 device_set_index = 12;
inline void Command::clear_device_set_index() {
  device_set_index_ = 0u;
}
inline ::google::protobuf::uint32 Command::device_set_index() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.device_set_index)
  return device_set_index_;
}
inline void Command::set_device_set_index(::google::protobuf::uint32 value) {
  
  device_set_index_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.device_set_index)
}

// .proto.receiver.DeviceMode device_mode = 13;
inline void Command::clear_device_mode() {
  device_mode_ = 0;
}
inline ::proto::receiver::DeviceMode Command::device_mode() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Command.device_mode)
  return static_cast< ::proto::receiver::DeviceMode >(device_mode_);
}
inline void Command::set_device_mode(::proto::receiver::DeviceMode value) {
  
  device_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Command.device_mode)
}

// -------------------------------------------------------------------

// DeviceInfo

// string serial_number = 1;
inline void DeviceInfo::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.receiver.DeviceInfo.serial_number)
  return serial_number_.GetNoArena();
}
inline void DeviceInfo::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.receiver.DeviceInfo.serial_number)
}
#if LANG_CXX11
inline void DeviceInfo::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.receiver.DeviceInfo.serial_number)
}
#endif
inline void DeviceInfo::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.receiver.DeviceInfo.serial_number)
}
inline void DeviceInfo::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.receiver.DeviceInfo.serial_number)
}
inline ::std::string* DeviceInfo::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:proto.receiver.DeviceInfo.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.receiver.DeviceInfo.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.DeviceInfo.serial_number)
}

// fixed32 ddc_type_count = 2;
inline void DeviceInfo::clear_ddc_type_count() {
  ddc_type_count_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::ddc_type_count() const {
  // @@protoc_insertion_point(field_get:proto.receiver.DeviceInfo.ddc_type_count)
  return ddc_type_count_;
}
inline void DeviceInfo::set_ddc_type_count(::google::protobuf::uint32 value) {
  
  ddc_type_count_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.DeviceInfo.ddc_type_count)
}

// fixed32 channel_count = 3;
inline void DeviceInfo::clear_channel_count() {
  channel_count_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::channel_count() const {
  // @@protoc_insertion_point(field_get:proto.receiver.DeviceInfo.channel_count)
  return channel_count_;
}
inline void DeviceInfo::set_channel_count(::google::protobuf::uint32 value) {
  
  channel_count_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.DeviceInfo.channel_count)
}

// string interface_type = 4;
inline void DeviceInfo::clear_interface_type() {
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::interface_type() const {
  // @@protoc_insertion_point(field_get:proto.receiver.DeviceInfo.interface_type)
  return interface_type_.GetNoArena();
}
inline void DeviceInfo::set_interface_type(const ::std::string& value) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.receiver.DeviceInfo.interface_type)
}
#if LANG_CXX11
inline void DeviceInfo::set_interface_type(::std::string&& value) {
  
  interface_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.receiver.DeviceInfo.interface_type)
}
#endif
inline void DeviceInfo::set_interface_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.receiver.DeviceInfo.interface_type)
}
inline void DeviceInfo::set_interface_type(const char* value, size_t size) {
  
  interface_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.receiver.DeviceInfo.interface_type)
}
inline ::std::string* DeviceInfo::mutable_interface_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.receiver.DeviceInfo.interface_type)
  return interface_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_interface_type() {
  // @@protoc_insertion_point(field_release:proto.receiver.DeviceInfo.interface_type)
  
  return interface_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_interface_type(::std::string* interface_type) {
  if (interface_type != nullptr) {
    
  } else {
    
  }
  interface_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_type);
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.DeviceInfo.interface_type)
}

// -------------------------------------------------------------------

// DeviceSetInfo

// repeated .proto.receiver.DeviceInfo device_info = 1;
inline int DeviceSetInfo::device_info_size() const {
  return device_info_.size();
}
inline void DeviceSetInfo::clear_device_info() {
  device_info_.Clear();
}
inline ::proto::receiver::DeviceInfo* DeviceSetInfo::mutable_device_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.receiver.DeviceSetInfo.device_info)
  return device_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::receiver::DeviceInfo >*
DeviceSetInfo::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.receiver.DeviceSetInfo.device_info)
  return &device_info_;
}
inline const ::proto::receiver::DeviceInfo& DeviceSetInfo::device_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.receiver.DeviceSetInfo.device_info)
  return device_info_.Get(index);
}
inline ::proto::receiver::DeviceInfo* DeviceSetInfo::add_device_info() {
  // @@protoc_insertion_point(field_add:proto.receiver.DeviceSetInfo.device_info)
  return device_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::receiver::DeviceInfo >&
DeviceSetInfo::device_info() const {
  // @@protoc_insertion_point(field_list:proto.receiver.DeviceSetInfo.device_info)
  return device_info_;
}

// -------------------------------------------------------------------

// Answer

// .proto.receiver.CommandType type = 1;
inline void Answer::clear_type() {
  type_ = 0;
}
inline ::proto::receiver::CommandType Answer::type() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Answer.type)
  return static_cast< ::proto::receiver::CommandType >(type_);
}
inline void Answer::set_type(::proto::receiver::CommandType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Answer.type)
}

// bool succesed = 2;
inline void Answer::clear_succesed() {
  succesed_ = false;
}
inline bool Answer::succesed() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Answer.succesed)
  return succesed_;
}
inline void Answer::set_succesed(bool value) {
  
  succesed_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Answer.succesed)
}

// -------------------------------------------------------------------

// Packet

// uint32 block_number = 1;
inline void Packet::clear_block_number() {
  block_number_ = 0u;
}
inline ::google::protobuf::uint32 Packet::block_number() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.block_number)
  return block_number_;
}
inline void Packet::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.block_number)
}

// uint32 ddc1_frequency = 2;
inline void Packet::clear_ddc1_frequency() {
  ddc1_frequency_ = 0u;
}
inline ::google::protobuf::uint32 Packet::ddc1_frequency() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.ddc1_frequency)
  return ddc1_frequency_;
}
inline void Packet::set_ddc1_frequency(::google::protobuf::uint32 value) {
  
  ddc1_frequency_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.ddc1_frequency)
}

// uint32 attenuator = 3;
inline void Packet::clear_attenuator() {
  attenuator_ = 0u;
}
inline ::google::protobuf::uint32 Packet::attenuator() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.attenuator)
  return attenuator_;
}
inline void Packet::set_attenuator(::google::protobuf::uint32 value) {
  
  attenuator_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.attenuator)
}

// uint32 block_size = 4;
inline void Packet::clear_block_size() {
  block_size_ = 0u;
}
inline ::google::protobuf::uint32 Packet::block_size() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.block_size)
  return block_size_;
}
inline void Packet::set_block_size(::google::protobuf::uint32 value) {
  
  block_size_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.block_size)
}

// uint32 device_count = 5;
inline void Packet::clear_device_count() {
  device_count_ = 0u;
}
inline ::google::protobuf::uint32 Packet::device_count() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.device_count)
  return device_count_;
}
inline void Packet::set_device_count(::google::protobuf::uint32 value) {
  
  device_count_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.device_count)
}

// uint32 sample_rate = 6;
inline void Packet::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::google::protobuf::uint32 Packet::sample_rate() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.sample_rate)
  return sample_rate_;
}
inline void Packet::set_sample_rate(::google::protobuf::uint32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.sample_rate)
}

// uint32 time_of_week = 7;
inline void Packet::clear_time_of_week() {
  time_of_week_ = 0u;
}
inline ::google::protobuf::uint32 Packet::time_of_week() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.time_of_week)
  return time_of_week_;
}
inline void Packet::set_time_of_week(::google::protobuf::uint32 value) {
  
  time_of_week_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.time_of_week)
}

// uint32 week_number = 8;
inline void Packet::clear_week_number() {
  week_number_ = 0u;
}
inline ::google::protobuf::uint32 Packet::week_number() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.week_number)
  return week_number_;
}
inline void Packet::set_week_number(::google::protobuf::uint32 value) {
  
  week_number_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.week_number)
}

// double ddc_sample_counter = 9;
inline void Packet::clear_ddc_sample_counter() {
  ddc_sample_counter_ = 0;
}
inline double Packet::ddc_sample_counter() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.ddc_sample_counter)
  return ddc_sample_counter_;
}
inline void Packet::set_ddc_sample_counter(double value) {
  
  ddc_sample_counter_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.ddc_sample_counter)
}

// uint64 adc_period_counter = 10;
inline void Packet::clear_adc_period_counter() {
  adc_period_counter_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Packet::adc_period_counter() const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.adc_period_counter)
  return adc_period_counter_;
}
inline void Packet::set_adc_period_counter(::google::protobuf::uint64 value) {
  
  adc_period_counter_ = value;
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.adc_period_counter)
}

// repeated float sample = 11;
inline int Packet::sample_size() const {
  return sample_.size();
}
inline void Packet::clear_sample() {
  sample_.Clear();
}
inline float Packet::sample(int index) const {
  // @@protoc_insertion_point(field_get:proto.receiver.Packet.sample)
  return sample_.Get(index);
}
inline void Packet::set_sample(int index, float value) {
  sample_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.receiver.Packet.sample)
}
inline void Packet::add_sample(float value) {
  sample_.Add(value);
  // @@protoc_insertion_point(field_add:proto.receiver.Packet.sample)
}
inline const ::google::protobuf::RepeatedField< float >&
Packet::sample() const {
  // @@protoc_insertion_point(field_list:proto.receiver.Packet.sample)
  return sample_;
}
inline ::google::protobuf::RepeatedField< float >*
Packet::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:proto.receiver.Packet.sample)
  return &sample_;
}

// -------------------------------------------------------------------

// HostToClient

// .proto.receiver.DeviceSetInfo device_set_info = 1;
inline bool HostToClient::has_device_set_info() const {
  return this != internal_default_instance() && device_set_info_ != nullptr;
}
inline void HostToClient::clear_device_set_info() {
  if (GetArenaNoVirtual() == nullptr && device_set_info_ != nullptr) {
    delete device_set_info_;
  }
  device_set_info_ = nullptr;
}
inline const ::proto::receiver::DeviceSetInfo& HostToClient::device_set_info() const {
  const ::proto::receiver::DeviceSetInfo* p = device_set_info_;
  // @@protoc_insertion_point(field_get:proto.receiver.HostToClient.device_set_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::receiver::DeviceSetInfo*>(
      &::proto::receiver::_DeviceSetInfo_default_instance_);
}
inline ::proto::receiver::DeviceSetInfo* HostToClient::release_device_set_info() {
  // @@protoc_insertion_point(field_release:proto.receiver.HostToClient.device_set_info)
  
  ::proto::receiver::DeviceSetInfo* temp = device_set_info_;
  device_set_info_ = nullptr;
  return temp;
}
inline ::proto::receiver::DeviceSetInfo* HostToClient::mutable_device_set_info() {
  
  if (device_set_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::receiver::DeviceSetInfo>(GetArenaNoVirtual());
    device_set_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.receiver.HostToClient.device_set_info)
  return device_set_info_;
}
inline void HostToClient::set_allocated_device_set_info(::proto::receiver::DeviceSetInfo* device_set_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_set_info_;
  }
  if (device_set_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_set_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_set_info, submessage_arena);
    }
    
  } else {
    
  }
  device_set_info_ = device_set_info;
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.HostToClient.device_set_info)
}

// .proto.receiver.Answer command_answer = 2;
inline bool HostToClient::has_command_answer() const {
  return this != internal_default_instance() && command_answer_ != nullptr;
}
inline void HostToClient::clear_command_answer() {
  if (GetArenaNoVirtual() == nullptr && command_answer_ != nullptr) {
    delete command_answer_;
  }
  command_answer_ = nullptr;
}
inline const ::proto::receiver::Answer& HostToClient::command_answer() const {
  const ::proto::receiver::Answer* p = command_answer_;
  // @@protoc_insertion_point(field_get:proto.receiver.HostToClient.command_answer)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::receiver::Answer*>(
      &::proto::receiver::_Answer_default_instance_);
}
inline ::proto::receiver::Answer* HostToClient::release_command_answer() {
  // @@protoc_insertion_point(field_release:proto.receiver.HostToClient.command_answer)
  
  ::proto::receiver::Answer* temp = command_answer_;
  command_answer_ = nullptr;
  return temp;
}
inline ::proto::receiver::Answer* HostToClient::mutable_command_answer() {
  
  if (command_answer_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::receiver::Answer>(GetArenaNoVirtual());
    command_answer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.receiver.HostToClient.command_answer)
  return command_answer_;
}
inline void HostToClient::set_allocated_command_answer(::proto::receiver::Answer* command_answer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_answer_;
  }
  if (command_answer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command_answer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command_answer, submessage_arena);
    }
    
  } else {
    
  }
  command_answer_ = command_answer;
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.HostToClient.command_answer)
}

// .proto.receiver.Packet packet = 3;
inline bool HostToClient::has_packet() const {
  return this != internal_default_instance() && packet_ != nullptr;
}
inline void HostToClient::clear_packet() {
  if (GetArenaNoVirtual() == nullptr && packet_ != nullptr) {
    delete packet_;
  }
  packet_ = nullptr;
}
inline const ::proto::receiver::Packet& HostToClient::packet() const {
  const ::proto::receiver::Packet* p = packet_;
  // @@protoc_insertion_point(field_get:proto.receiver.HostToClient.packet)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::receiver::Packet*>(
      &::proto::receiver::_Packet_default_instance_);
}
inline ::proto::receiver::Packet* HostToClient::release_packet() {
  // @@protoc_insertion_point(field_release:proto.receiver.HostToClient.packet)
  
  ::proto::receiver::Packet* temp = packet_;
  packet_ = nullptr;
  return temp;
}
inline ::proto::receiver::Packet* HostToClient::mutable_packet() {
  
  if (packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::receiver::Packet>(GetArenaNoVirtual());
    packet_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.receiver.HostToClient.packet)
  return packet_;
}
inline void HostToClient::set_allocated_packet(::proto::receiver::Packet* packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packet_;
  }
  if (packet) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    
  } else {
    
  }
  packet_ = packet;
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.HostToClient.packet)
}

// -------------------------------------------------------------------

// ClientToHost

// .proto.receiver.Command command = 1;
inline bool ClientToHost::has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline void ClientToHost::clear_command() {
  if (GetArenaNoVirtual() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::proto::receiver::Command& ClientToHost::command() const {
  const ::proto::receiver::Command* p = command_;
  // @@protoc_insertion_point(field_get:proto.receiver.ClientToHost.command)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::receiver::Command*>(
      &::proto::receiver::_Command_default_instance_);
}
inline ::proto::receiver::Command* ClientToHost::release_command() {
  // @@protoc_insertion_point(field_release:proto.receiver.ClientToHost.command)
  
  ::proto::receiver::Command* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::proto::receiver::Command* ClientToHost::mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::receiver::Command>(GetArenaNoVirtual());
    command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.receiver.ClientToHost.command)
  return command_;
}
inline void ClientToHost::set_allocated_command(::proto::receiver::Command* command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:proto.receiver.ClientToHost.command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace receiver
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::receiver::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::receiver::CommandType>() {
  return ::proto::receiver::CommandType_descriptor();
}
template <> struct is_proto_enum< ::proto::receiver::DeviceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::receiver::DeviceMode>() {
  return ::proto::receiver::DeviceMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_receiver_2eproto
