// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#ifndef PROTOBUF_INCLUDED_key_5fexchange_2eproto
#define PROTOBUF_INCLUDED_key_5fexchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_key_5fexchange_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_key_5fexchange_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_key_5fexchange_2eproto();
class ClientHello;
class ClientHelloDefaultTypeInternal;
extern ClientHelloDefaultTypeInternal _ClientHello_default_instance_;
class ClientKeyExchange;
class ClientKeyExchangeDefaultTypeInternal;
extern ClientKeyExchangeDefaultTypeInternal _ClientKeyExchange_default_instance_;
class ClientSessionChange;
class ClientSessionChangeDefaultTypeInternal;
extern ClientSessionChangeDefaultTypeInternal _ClientSessionChange_default_instance_;
class ServerKeyExchange;
class ServerKeyExchangeDefaultTypeInternal;
extern ServerKeyExchangeDefaultTypeInternal _ServerKeyExchange_default_instance_;
class ServerSessionChange;
class ServerSessionChangeDefaultTypeInternal;
extern ServerSessionChangeDefaultTypeInternal _ServerSessionChange_default_instance_;
namespace google {
namespace protobuf {
template<> ::ClientHello* Arena::CreateMaybeMessage<::ClientHello>(Arena*);
template<> ::ClientKeyExchange* Arena::CreateMaybeMessage<::ClientKeyExchange>(Arena*);
template<> ::ClientSessionChange* Arena::CreateMaybeMessage<::ClientSessionChange>(Arena*);
template<> ::ServerKeyExchange* Arena::CreateMaybeMessage<::ServerKeyExchange>(Arena*);
template<> ::ServerSessionChange* Arena::CreateMaybeMessage<::ServerSessionChange>(Arena*);
}  // namespace protobuf
}  // namespace google

enum SessionType {
  SESSION_UNKNOWN = 0,
  SESSION_COMMAND = 1,
  SESSION_SIGNAL_STREAM = 2,
  SESSION_SIGNAL_FILE_TRANSFER = 3,
  SESSIOM_TYPE_ALL = 7,
  SessionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SessionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SessionType_IsValid(int value);
const SessionType SessionType_MIN = SESSION_UNKNOWN;
const SessionType SessionType_MAX = SESSIOM_TYPE_ALL;
const int SessionType_ARRAYSIZE = SessionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionType_descriptor();
inline const ::std::string& SessionType_Name(SessionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionType_descriptor(), value);
}
inline bool SessionType_Parse(
    const ::std::string& name, SessionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionType>(
    SessionType_descriptor(), name, value);
}
enum Method {
  METHOD_UNKNOWN = 0,
  METHOD_ADDRESS = 1,
  METHOD_RANDOW_VALUE = 2,
  Method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Method_IsValid(int value);
const Method Method_MIN = METHOD_UNKNOWN;
const Method Method_MAX = METHOD_RANDOW_VALUE;
const int Method_ARRAYSIZE = Method_MAX + 1;

const ::google::protobuf::EnumDescriptor* Method_descriptor();
inline const ::std::string& Method_Name(Method value) {
  return ::google::protobuf::internal::NameOfEnum(
    Method_descriptor(), value);
}
inline bool Method_Parse(
    const ::std::string& name, Method* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Method>(
    Method_descriptor(), name, value);
}
// ===================================================================

class ClientHello :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientHello) */ {
 public:
  ClientHello();
  virtual ~ClientHello();

  ClientHello(const ClientHello& from);

  inline ClientHello& operator=(const ClientHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientHello(ClientHello&& from) noexcept
    : ClientHello() {
    *this = ::std::move(from);
  }

  inline ClientHello& operator=(ClientHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientHello* internal_default_instance() {
    return reinterpret_cast<const ClientHello*>(
               &_ClientHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientHello* other);
  friend void swap(ClientHello& a, ClientHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientHello* New() const final {
    return CreateMaybeMessage<ClientHello>(nullptr);
  }

  ClientHello* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientHello>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientHello& from);
  void MergeFrom(const ClientHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 2;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // .Method method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::Method method() const;
  void set_method(::Method value);

  // @@protoc_insertion_point(class_scope:ClientHello)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  int method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class ServerKeyExchange :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerKeyExchange) */ {
 public:
  ServerKeyExchange();
  virtual ~ServerKeyExchange();

  ServerKeyExchange(const ServerKeyExchange& from);

  inline ServerKeyExchange& operator=(const ServerKeyExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerKeyExchange(ServerKeyExchange&& from) noexcept
    : ServerKeyExchange() {
    *this = ::std::move(from);
  }

  inline ServerKeyExchange& operator=(ServerKeyExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerKeyExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerKeyExchange* internal_default_instance() {
    return reinterpret_cast<const ServerKeyExchange*>(
               &_ServerKeyExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerKeyExchange* other);
  friend void swap(ServerKeyExchange& a, ServerKeyExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerKeyExchange* New() const final {
    return CreateMaybeMessage<ServerKeyExchange>(nullptr);
  }

  ServerKeyExchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerKeyExchange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerKeyExchange& from);
  void MergeFrom(const ServerKeyExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerKeyExchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Method method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::Method method() const;
  void set_method(::Method value);

  // uint32 user_key = 2;
  void clear_user_key();
  static const int kUserKeyFieldNumber = 2;
  ::google::protobuf::uint32 user_key() const;
  void set_user_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ServerKeyExchange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int method_;
  ::google::protobuf::uint32 user_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class ClientKeyExchange :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientKeyExchange) */ {
 public:
  ClientKeyExchange();
  virtual ~ClientKeyExchange();

  ClientKeyExchange(const ClientKeyExchange& from);

  inline ClientKeyExchange& operator=(const ClientKeyExchange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientKeyExchange(ClientKeyExchange&& from) noexcept
    : ClientKeyExchange() {
    *this = ::std::move(from);
  }

  inline ClientKeyExchange& operator=(ClientKeyExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientKeyExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientKeyExchange* internal_default_instance() {
    return reinterpret_cast<const ClientKeyExchange*>(
               &_ClientKeyExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientKeyExchange* other);
  friend void swap(ClientKeyExchange& a, ClientKeyExchange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientKeyExchange* New() const final {
    return CreateMaybeMessage<ClientKeyExchange>(nullptr);
  }

  ClientKeyExchange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientKeyExchange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientKeyExchange& from);
  void MergeFrom(const ClientKeyExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientKeyExchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Method method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::Method method() const;
  void set_method(::Method value);

  // uint32 user_key = 2;
  void clear_user_key();
  static const int kUserKeyFieldNumber = 2;
  ::google::protobuf::uint32 user_key() const;
  void set_user_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ClientKeyExchange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int method_;
  ::google::protobuf::uint32 user_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class ServerSessionChange :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerSessionChange) */ {
 public:
  ServerSessionChange();
  virtual ~ServerSessionChange();

  ServerSessionChange(const ServerSessionChange& from);

  inline ServerSessionChange& operator=(const ServerSessionChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerSessionChange(ServerSessionChange&& from) noexcept
    : ServerSessionChange() {
    *this = ::std::move(from);
  }

  inline ServerSessionChange& operator=(ServerSessionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerSessionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSessionChange* internal_default_instance() {
    return reinterpret_cast<const ServerSessionChange*>(
               &_ServerSessionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ServerSessionChange* other);
  friend void swap(ServerSessionChange& a, ServerSessionChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerSessionChange* New() const final {
    return CreateMaybeMessage<ServerSessionChange>(nullptr);
  }

  ServerSessionChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerSessionChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerSessionChange& from);
  void MergeFrom(const ServerSessionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSessionChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SessionType session_type = 1;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 1;
  ::SessionType session_type() const;
  void set_session_type(::SessionType value);

  // @@protoc_insertion_point(class_scope:ServerSessionChange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int session_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class ClientSessionChange :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientSessionChange) */ {
 public:
  ClientSessionChange();
  virtual ~ClientSessionChange();

  ClientSessionChange(const ClientSessionChange& from);

  inline ClientSessionChange& operator=(const ClientSessionChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientSessionChange(ClientSessionChange&& from) noexcept
    : ClientSessionChange() {
    *this = ::std::move(from);
  }

  inline ClientSessionChange& operator=(ClientSessionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientSessionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSessionChange* internal_default_instance() {
    return reinterpret_cast<const ClientSessionChange*>(
               &_ClientSessionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientSessionChange* other);
  friend void swap(ClientSessionChange& a, ClientSessionChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientSessionChange* New() const final {
    return CreateMaybeMessage<ClientSessionChange>(nullptr);
  }

  ClientSessionChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientSessionChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientSessionChange& from);
  void MergeFrom(const ClientSessionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSessionChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .SessionType session_type = 1;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 1;
  ::SessionType session_type() const;
  void set_session_type(::SessionType value);

  // @@protoc_insertion_point(class_scope:ClientSessionChange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int session_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fexchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientHello

// .Method method = 1;
inline void ClientHello::clear_method() {
  method_ = 0;
}
inline ::Method ClientHello::method() const {
  // @@protoc_insertion_point(field_get:ClientHello.method)
  return static_cast< ::Method >(method_);
}
inline void ClientHello::set_method(::Method value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:ClientHello.method)
}

// string user_name = 2;
inline void ClientHello::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientHello::user_name() const {
  // @@protoc_insertion_point(field_get:ClientHello.user_name)
  return user_name_.GetNoArena();
}
inline void ClientHello::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClientHello.user_name)
}
#if LANG_CXX11
inline void ClientHello::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientHello.user_name)
}
#endif
inline void ClientHello::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientHello.user_name)
}
inline void ClientHello::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientHello.user_name)
}
inline ::std::string* ClientHello::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:ClientHello.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientHello::release_user_name() {
  // @@protoc_insertion_point(field_release:ClientHello.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientHello::set_allocated_user_name(::std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ClientHello.user_name)
}

// -------------------------------------------------------------------

// ServerKeyExchange

// .Method method = 1;
inline void ServerKeyExchange::clear_method() {
  method_ = 0;
}
inline ::Method ServerKeyExchange::method() const {
  // @@protoc_insertion_point(field_get:ServerKeyExchange.method)
  return static_cast< ::Method >(method_);
}
inline void ServerKeyExchange::set_method(::Method value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:ServerKeyExchange.method)
}

// uint32 user_key = 2;
inline void ServerKeyExchange::clear_user_key() {
  user_key_ = 0u;
}
inline ::google::protobuf::uint32 ServerKeyExchange::user_key() const {
  // @@protoc_insertion_point(field_get:ServerKeyExchange.user_key)
  return user_key_;
}
inline void ServerKeyExchange::set_user_key(::google::protobuf::uint32 value) {
  
  user_key_ = value;
  // @@protoc_insertion_point(field_set:ServerKeyExchange.user_key)
}

// -------------------------------------------------------------------

// ClientKeyExchange

// .Method method = 1;
inline void ClientKeyExchange::clear_method() {
  method_ = 0;
}
inline ::Method ClientKeyExchange::method() const {
  // @@protoc_insertion_point(field_get:ClientKeyExchange.method)
  return static_cast< ::Method >(method_);
}
inline void ClientKeyExchange::set_method(::Method value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:ClientKeyExchange.method)
}

// uint32 user_key = 2;
inline void ClientKeyExchange::clear_user_key() {
  user_key_ = 0u;
}
inline ::google::protobuf::uint32 ClientKeyExchange::user_key() const {
  // @@protoc_insertion_point(field_get:ClientKeyExchange.user_key)
  return user_key_;
}
inline void ClientKeyExchange::set_user_key(::google::protobuf::uint32 value) {
  
  user_key_ = value;
  // @@protoc_insertion_point(field_set:ClientKeyExchange.user_key)
}

// -------------------------------------------------------------------

// ServerSessionChange

// .SessionType session_type = 1;
inline void ServerSessionChange::clear_session_type() {
  session_type_ = 0;
}
inline ::SessionType ServerSessionChange::session_type() const {
  // @@protoc_insertion_point(field_get:ServerSessionChange.session_type)
  return static_cast< ::SessionType >(session_type_);
}
inline void ServerSessionChange::set_session_type(::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:ServerSessionChange.session_type)
}

// -------------------------------------------------------------------

// ClientSessionChange

// .SessionType session_type = 1;
inline void ClientSessionChange::clear_session_type() {
  session_type_ = 0;
}
inline ::SessionType ClientSessionChange::session_type() const {
  // @@protoc_insertion_point(field_get:ClientSessionChange.session_type)
  return static_cast< ::SessionType >(session_type_);
}
inline void ClientSessionChange::set_session_type(::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:ClientSessionChange.session_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SessionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SessionType>() {
  return ::SessionType_descriptor();
}
template <> struct is_proto_enum< ::Method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Method>() {
  return ::Method_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_key_5fexchange_2eproto
