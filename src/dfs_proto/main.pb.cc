// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#include "main.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_main_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Answer_main_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_main_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_main_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_main_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Preselectors_main_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_main_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Command_main_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_main_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeviceSetInfo_main_2eproto;
namespace proto {
namespace receiver {
class PreselectorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Preselectors> _instance;
} _Preselectors_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class DeviceSetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceSetInfo> _instance;
} _DeviceSetInfo_default_instance_;
class AnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Answer> _instance;
} _Answer_default_instance_;
class HostToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HostToClient> _instance;
} _HostToClient_default_instance_;
class ClientToHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientToHost> _instance;
} _ClientToHost_default_instance_;
}  // namespace receiver
}  // namespace proto
static void InitDefaultsPreselectors_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_Preselectors_default_instance_;
    new (ptr) ::proto::receiver::Preselectors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::Preselectors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Preselectors_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreselectors_main_2eproto}, {}};

static void InitDefaultsCommand_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_Command_default_instance_;
    new (ptr) ::proto::receiver::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Command_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommand_main_2eproto}, {
      &scc_info_Preselectors_main_2eproto.base,}};

static void InitDefaultsDeviceInfo_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_DeviceInfo_default_instance_;
    new (ptr) ::proto::receiver::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo_main_2eproto}, {}};

static void InitDefaultsDeviceSetInfo_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_DeviceSetInfo_default_instance_;
    new (ptr) ::proto::receiver::DeviceSetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::DeviceSetInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceSetInfo_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceSetInfo_main_2eproto}, {
      &scc_info_DeviceInfo_main_2eproto.base,}};

static void InitDefaultsAnswer_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_Answer_default_instance_;
    new (ptr) ::proto::receiver::Answer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::Answer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Answer_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnswer_main_2eproto}, {}};

static void InitDefaultsHostToClient_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_HostToClient_default_instance_;
    new (ptr) ::proto::receiver::HostToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::HostToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HostToClient_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHostToClient_main_2eproto}, {
      &scc_info_DeviceSetInfo_main_2eproto.base,
      &scc_info_Answer_main_2eproto.base,}};

static void InitDefaultsClientToHost_main_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::receiver::_ClientToHost_default_instance_;
    new (ptr) ::proto::receiver::ClientToHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::receiver::ClientToHost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClientToHost_main_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClientToHost_main_2eproto}, {
      &scc_info_Command_main_2eproto.base,}};

void InitDefaults_main_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Preselectors_main_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command_main_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo_main_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceSetInfo_main_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Answer_main_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HostToClient_main_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientToHost_main_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_main_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_main_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_main_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_main_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Preselectors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Preselectors, low_frequency_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Preselectors, high_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, command_type_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, attenuator_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, preselectors_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, preamplifier_enebled_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, adc_noice_blanker_enebled_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, adc_noice_blanker_threshold_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, ddc1_frequency_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, ddc1_type_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, start_ddc1_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Command, samples_per_buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceInfo, serial_number_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceInfo, ddc_type_count_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceInfo, channel_count_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceInfo, interface_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceSetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::DeviceSetInfo, device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Answer, type_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::Answer, succesed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::HostToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::HostToClient, device_set_info_),
  PROTOBUF_FIELD_OFFSET(::proto::receiver::HostToClient, command_answer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::ClientToHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::receiver::ClientToHost, command_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::receiver::Preselectors)},
  { 7, -1, sizeof(::proto::receiver::Command)},
  { 22, -1, sizeof(::proto::receiver::DeviceInfo)},
  { 31, -1, sizeof(::proto::receiver::DeviceSetInfo)},
  { 37, -1, sizeof(::proto::receiver::Answer)},
  { 44, -1, sizeof(::proto::receiver::HostToClient)},
  { 51, -1, sizeof(::proto::receiver::ClientToHost)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_Preselectors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_DeviceSetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_Answer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_HostToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::receiver::_ClientToHost_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_main_2eproto = {
  {}, AddDescriptors_main_2eproto, "main.proto", schemas,
  file_default_instances, TableStruct_main_2eproto::offsets,
  file_level_metadata_main_2eproto, 7, file_level_enum_descriptors_main_2eproto, file_level_service_descriptors_main_2eproto,
};

const char descriptor_table_protodef_main_2eproto[] =
  "\n\nmain.proto\022\016proto.receiver\"=\n\014Preselec"
  "tors\022\025\n\rlow_frequency\030\001 \001(\r\022\026\n\016high_freq"
  "uency\030\002 \001(\r\"\305\002\n\007Command\0221\n\014command_type\030"
  "\001 \001(\0162\033.proto.receiver.CommandType\022\022\n\nat"
  "tenuator\030\002 \001(\r\0222\n\014preselectors\030\003 \001(\0132\034.p"
  "roto.receiver.Preselectors\022\034\n\024preamplifi"
  "er_enebled\030\004 \001(\010\022!\n\031adc_noice_blanker_en"
  "ebled\030\005 \001(\010\022#\n\033adc_noice_blanker_thresho"
  "ld\030\006 \001(\014\022\026\n\016ddc1_frequency\030\007 \001(\r\022\021\n\tddc1"
  "_type\030\010 \001(\r\022\022\n\nstart_ddc1\030\t \001(\010\022\032\n\022sampl"
  "es_per_buffer\030\n \001(\r\"j\n\nDeviceInfo\022\025\n\rser"
  "ial_number\030\001 \001(\t\022\026\n\016ddc_type_count\030\002 \001(\007"
  "\022\025\n\rchannel_count\030\003 \001(\007\022\026\n\016interface_typ"
  "e\030\004 \001(\t\"@\n\rDeviceSetInfo\022/\n\013device_info\030"
  "\001 \003(\0132\032.proto.receiver.DeviceInfo\"E\n\006Ans"
  "wer\022)\n\004type\030\001 \001(\0162\033.proto.receiver.Comma"
  "ndType\022\020\n\010succesed\030\002 \001(\010\"v\n\014HostToClient"
  "\0226\n\017device_set_info\030\001 \001(\0132\035.proto.receiv"
  "er.DeviceSetInfo\022.\n\016command_answer\030\002 \001(\013"
  "2\026.proto.receiver.Answer\"8\n\014ClientToHost"
  "\022(\n\007command\030\001 \001(\0132\027.proto.receiver.Comma"
  "nd*\236\002\n\013CommandType\022\021\n\rSET_POWER_OFF\020\000\022\020\n"
  "\014SET_POWER_ON\020\001\022\022\n\016SET_ATTENUATOR\020\002\022\024\n\020S"
  "ET_PRESELECTORS\020\003\022\034\n\030SET_PREAMPLIFIER_EN"
  "ABLED\020\004\022!\n\035SET_ADC_NOICE_BLANKER_ENABLED"
  "\020\005\022#\n\037SET_ADC_NOICE_BLANKER_THRESHOLD\020\006\022"
  "\026\n\022SET_DDC1_FREQUENCY\020\007\022\021\n\rSET_DDC1_TYPE"
  "\020\010\022\020\n\014SET_SETTINGS\020\t\022\016\n\nSTART_DDC1\020\n\022\r\n\t"
  "STOP_DDC1\020\013b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_main_2eproto = {
  false, InitDefaults_main_2eproto, 
  descriptor_table_protodef_main_2eproto,
  "main.proto", &assign_descriptors_table_main_2eproto, 1139,
};

void AddDescriptors_main_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_main_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_main_2eproto = []() { AddDescriptors_main_2eproto(); return true; }();
namespace proto {
namespace receiver {
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_main_2eproto);
  return file_level_enum_descriptors_main_2eproto[0];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Preselectors::InitAsDefaultInstance() {
}
class Preselectors::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preselectors::kLowFrequencyFieldNumber;
const int Preselectors::kHighFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preselectors::Preselectors()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.Preselectors)
}
Preselectors::Preselectors(const Preselectors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_frequency_, &from.low_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_frequency_) -
    reinterpret_cast<char*>(&low_frequency_)) + sizeof(high_frequency_));
  // @@protoc_insertion_point(copy_constructor:proto.receiver.Preselectors)
}

void Preselectors::SharedCtor() {
  ::memset(&low_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_frequency_) -
      reinterpret_cast<char*>(&low_frequency_)) + sizeof(high_frequency_));
}

Preselectors::~Preselectors() {
  // @@protoc_insertion_point(destructor:proto.receiver.Preselectors)
  SharedDtor();
}

void Preselectors::SharedDtor() {
}

void Preselectors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Preselectors& Preselectors::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Preselectors_main_2eproto.base);
  return *internal_default_instance();
}


void Preselectors::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.Preselectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&low_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_frequency_) -
      reinterpret_cast<char*>(&low_frequency_)) + sizeof(high_frequency_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Preselectors::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Preselectors*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 low_frequency = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_low_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 high_frequency = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_high_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Preselectors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.Preselectors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 low_frequency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 high_frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.Preselectors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.Preselectors)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Preselectors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.Preselectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 low_frequency = 1;
  if (this->low_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->low_frequency(), output);
  }

  // uint32 high_frequency = 2;
  if (this->high_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->high_frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.Preselectors)
}

::google::protobuf::uint8* Preselectors::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.Preselectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 low_frequency = 1;
  if (this->low_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->low_frequency(), target);
  }

  // uint32 high_frequency = 2;
  if (this->high_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->high_frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.Preselectors)
  return target;
}

size_t Preselectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.Preselectors)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 low_frequency = 1;
  if (this->low_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_frequency());
  }

  // uint32 high_frequency = 2;
  if (this->high_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preselectors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.Preselectors)
  GOOGLE_DCHECK_NE(&from, this);
  const Preselectors* source =
      ::google::protobuf::DynamicCastToGenerated<Preselectors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.Preselectors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.Preselectors)
    MergeFrom(*source);
  }
}

void Preselectors::MergeFrom(const Preselectors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.Preselectors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.low_frequency() != 0) {
    set_low_frequency(from.low_frequency());
  }
  if (from.high_frequency() != 0) {
    set_high_frequency(from.high_frequency());
  }
}

void Preselectors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.Preselectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preselectors::CopyFrom(const Preselectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.Preselectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preselectors::IsInitialized() const {
  return true;
}

void Preselectors::Swap(Preselectors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preselectors::InternalSwap(Preselectors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(low_frequency_, other->low_frequency_);
  swap(high_frequency_, other->high_frequency_);
}

::google::protobuf::Metadata Preselectors::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::proto::receiver::_Command_default_instance_._instance.get_mutable()->preselectors_ = const_cast< ::proto::receiver::Preselectors*>(
      ::proto::receiver::Preselectors::internal_default_instance());
}
class Command::HasBitSetters {
 public:
  static const ::proto::receiver::Preselectors& preselectors(const Command* msg);
};

const ::proto::receiver::Preselectors&
Command::HasBitSetters::preselectors(const Command* msg) {
  return *msg->preselectors_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCommandTypeFieldNumber;
const int Command::kAttenuatorFieldNumber;
const int Command::kPreselectorsFieldNumber;
const int Command::kPreamplifierEnebledFieldNumber;
const int Command::kAdcNoiceBlankerEnebledFieldNumber;
const int Command::kAdcNoiceBlankerThresholdFieldNumber;
const int Command::kDdc1FrequencyFieldNumber;
const int Command::kDdc1TypeFieldNumber;
const int Command::kStartDdc1FieldNumber;
const int Command::kSamplesPerBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adc_noice_blanker_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adc_noice_blanker_threshold().size() > 0) {
    adc_noice_blanker_threshold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adc_noice_blanker_threshold_);
  }
  if (from.has_preselectors()) {
    preselectors_ = new ::proto::receiver::Preselectors(*from.preselectors_);
  } else {
    preselectors_ = nullptr;
  }
  ::memcpy(&command_type_, &from.command_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&samples_per_buffer_) -
    reinterpret_cast<char*>(&command_type_)) + sizeof(samples_per_buffer_));
  // @@protoc_insertion_point(copy_constructor:proto.receiver.Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Command_main_2eproto.base);
  adc_noice_blanker_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&preselectors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samples_per_buffer_) -
      reinterpret_cast<char*>(&preselectors_)) + sizeof(samples_per_buffer_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:proto.receiver.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  adc_noice_blanker_threshold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete preselectors_;
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Command_main_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adc_noice_blanker_threshold_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && preselectors_ != nullptr) {
    delete preselectors_;
  }
  preselectors_ = nullptr;
  ::memset(&command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samples_per_buffer_) -
      reinterpret_cast<char*>(&command_type_)) + sizeof(samples_per_buffer_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .proto.receiver.CommandType command_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_command_type(static_cast<::proto::receiver::CommandType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 attenuator = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attenuator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .proto.receiver.Preselectors preselectors = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::receiver::Preselectors::_InternalParse;
        object = msg->mutable_preselectors();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool preamplifier_enebled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_preamplifier_enebled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool adc_noice_blanker_enebled = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_adc_noice_blanker_enebled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes adc_noice_blanker_threshold = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_adc_noice_blanker_threshold();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 ddc1_frequency = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_ddc1_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ddc1_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_ddc1_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool start_ddc1 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_start_ddc1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 samples_per_buffer = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_samples_per_buffer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.receiver.CommandType command_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command_type(static_cast< ::proto::receiver::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 attenuator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attenuator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.receiver.Preselectors preselectors = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preselectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preamplifier_enebled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preamplifier_enebled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool adc_noice_blanker_enebled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adc_noice_blanker_enebled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes adc_noice_blanker_threshold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adc_noice_blanker_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc1_frequency = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc1_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc1_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc1_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool start_ddc1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_ddc1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 samples_per_buffer = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samples_per_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.Command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.CommandType command_type = 1;
  if (this->command_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command_type(), output);
  }

  // uint32 attenuator = 2;
  if (this->attenuator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attenuator(), output);
  }

  // .proto.receiver.Preselectors preselectors = 3;
  if (this->has_preselectors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::preselectors(this), output);
  }

  // bool preamplifier_enebled = 4;
  if (this->preamplifier_enebled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preamplifier_enebled(), output);
  }

  // bool adc_noice_blanker_enebled = 5;
  if (this->adc_noice_blanker_enebled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->adc_noice_blanker_enebled(), output);
  }

  // bytes adc_noice_blanker_threshold = 6;
  if (this->adc_noice_blanker_threshold().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->adc_noice_blanker_threshold(), output);
  }

  // uint32 ddc1_frequency = 7;
  if (this->ddc1_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ddc1_frequency(), output);
  }

  // uint32 ddc1_type = 8;
  if (this->ddc1_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ddc1_type(), output);
  }

  // bool start_ddc1 = 9;
  if (this->start_ddc1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->start_ddc1(), output);
  }

  // uint32 samples_per_buffer = 10;
  if (this->samples_per_buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->samples_per_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.CommandType command_type = 1;
  if (this->command_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command_type(), target);
  }

  // uint32 attenuator = 2;
  if (this->attenuator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attenuator(), target);
  }

  // .proto.receiver.Preselectors preselectors = 3;
  if (this->has_preselectors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::preselectors(this), target);
  }

  // bool preamplifier_enebled = 4;
  if (this->preamplifier_enebled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preamplifier_enebled(), target);
  }

  // bool adc_noice_blanker_enebled = 5;
  if (this->adc_noice_blanker_enebled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->adc_noice_blanker_enebled(), target);
  }

  // bytes adc_noice_blanker_threshold = 6;
  if (this->adc_noice_blanker_threshold().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->adc_noice_blanker_threshold(), target);
  }

  // uint32 ddc1_frequency = 7;
  if (this->ddc1_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ddc1_frequency(), target);
  }

  // uint32 ddc1_type = 8;
  if (this->ddc1_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ddc1_type(), target);
  }

  // bool start_ddc1 = 9;
  if (this->start_ddc1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->start_ddc1(), target);
  }

  // uint32 samples_per_buffer = 10;
  if (this->samples_per_buffer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->samples_per_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes adc_noice_blanker_threshold = 6;
  if (this->adc_noice_blanker_threshold().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adc_noice_blanker_threshold());
  }

  // .proto.receiver.Preselectors preselectors = 3;
  if (this->has_preselectors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preselectors_);
  }

  // .proto.receiver.CommandType command_type = 1;
  if (this->command_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_type());
  }

  // uint32 attenuator = 2;
  if (this->attenuator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attenuator());
  }

  // bool preamplifier_enebled = 4;
  if (this->preamplifier_enebled() != 0) {
    total_size += 1 + 1;
  }

  // bool adc_noice_blanker_enebled = 5;
  if (this->adc_noice_blanker_enebled() != 0) {
    total_size += 1 + 1;
  }

  // bool start_ddc1 = 9;
  if (this->start_ddc1() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ddc1_frequency = 7;
  if (this->ddc1_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc1_frequency());
  }

  // uint32 ddc1_type = 8;
  if (this->ddc1_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc1_type());
  }

  // uint32 samples_per_buffer = 10;
  if (this->samples_per_buffer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samples_per_buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.adc_noice_blanker_threshold().size() > 0) {

    adc_noice_blanker_threshold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adc_noice_blanker_threshold_);
  }
  if (from.has_preselectors()) {
    mutable_preselectors()->::proto::receiver::Preselectors::MergeFrom(from.preselectors());
  }
  if (from.command_type() != 0) {
    set_command_type(from.command_type());
  }
  if (from.attenuator() != 0) {
    set_attenuator(from.attenuator());
  }
  if (from.preamplifier_enebled() != 0) {
    set_preamplifier_enebled(from.preamplifier_enebled());
  }
  if (from.adc_noice_blanker_enebled() != 0) {
    set_adc_noice_blanker_enebled(from.adc_noice_blanker_enebled());
  }
  if (from.start_ddc1() != 0) {
    set_start_ddc1(from.start_ddc1());
  }
  if (from.ddc1_frequency() != 0) {
    set_ddc1_frequency(from.ddc1_frequency());
  }
  if (from.ddc1_type() != 0) {
    set_ddc1_type(from.ddc1_type());
  }
  if (from.samples_per_buffer() != 0) {
    set_samples_per_buffer(from.samples_per_buffer());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  adc_noice_blanker_threshold_.Swap(&other->adc_noice_blanker_threshold_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(preselectors_, other->preselectors_);
  swap(command_type_, other->command_type_);
  swap(attenuator_, other->attenuator_);
  swap(preamplifier_enebled_, other->preamplifier_enebled_);
  swap(adc_noice_blanker_enebled_, other->adc_noice_blanker_enebled_);
  swap(start_ddc1_, other->start_ddc1_);
  swap(ddc1_frequency_, other->ddc1_frequency_);
  swap(ddc1_type_, other->ddc1_type_);
  swap(samples_per_buffer_, other->samples_per_buffer_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kSerialNumberFieldNumber;
const int DeviceInfo::kDdcTypeCountFieldNumber;
const int DeviceInfo::kChannelCountFieldNumber;
const int DeviceInfo::kInterfaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  ::memcpy(&ddc_type_count_, &from.ddc_type_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_count_) -
    reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  // @@protoc_insertion_point(copy_constructor:proto.receiver.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceInfo_main_2eproto.base);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:proto.receiver.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceInfo_main_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string serial_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.receiver.DeviceInfo.serial_number");
        object = msg->mutable_serial_number();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ddc_type_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_channel_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // string interface_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.receiver.DeviceInfo.interface_type");
        object = msg->mutable_interface_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.receiver.DeviceInfo.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ddc_type_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.receiver.DeviceInfo.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.DeviceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.receiver.DeviceInfo.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ddc_type_count(), output);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->channel_count(), output);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.receiver.DeviceInfo.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->interface_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.receiver.DeviceInfo.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ddc_type_count(), target);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->channel_count(), target);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.receiver.DeviceInfo.interface_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->interface_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.ddc_type_count() != 0) {
    set_ddc_type_count(from.ddc_type_count());
  }
  if (from.channel_count() != 0) {
    set_channel_count(from.channel_count());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_type_.Swap(&other->interface_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ddc_type_count_, other->ddc_type_count_);
  swap(channel_count_, other->channel_count_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeviceSetInfo::InitAsDefaultInstance() {
}
class DeviceSetInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceSetInfo::kDeviceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceSetInfo::DeviceSetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.DeviceSetInfo)
}
DeviceSetInfo::DeviceSetInfo(const DeviceSetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      device_info_(from.device_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.receiver.DeviceSetInfo)
}

void DeviceSetInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceSetInfo_main_2eproto.base);
}

DeviceSetInfo::~DeviceSetInfo() {
  // @@protoc_insertion_point(destructor:proto.receiver.DeviceSetInfo)
  SharedDtor();
}

void DeviceSetInfo::SharedDtor() {
}

void DeviceSetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceSetInfo& DeviceSetInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceSetInfo_main_2eproto.base);
  return *internal_default_instance();
}


void DeviceSetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceSetInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceSetInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.receiver.DeviceInfo device_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::receiver::DeviceInfo::_InternalParse;
          object = msg->add_device_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceSetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.DeviceSetInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.receiver.DeviceInfo device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.DeviceSetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.DeviceSetInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceSetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.receiver.DeviceInfo device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.DeviceSetInfo)
}

::google::protobuf::uint8* DeviceSetInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.receiver.DeviceInfo device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.DeviceSetInfo)
  return target;
}

size_t DeviceSetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.DeviceSetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.receiver.DeviceInfo device_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.DeviceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSetInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceSetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.DeviceSetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.DeviceSetInfo)
    MergeFrom(*source);
  }
}

void DeviceSetInfo::MergeFrom(const DeviceSetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.DeviceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_info_.MergeFrom(from.device_info_);
}

void DeviceSetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.DeviceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSetInfo::CopyFrom(const DeviceSetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.DeviceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSetInfo::IsInitialized() const {
  return true;
}

void DeviceSetInfo::Swap(DeviceSetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceSetInfo::InternalSwap(DeviceSetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_info_)->InternalSwap(CastToBase(&other->device_info_));
}

::google::protobuf::Metadata DeviceSetInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Answer::InitAsDefaultInstance() {
}
class Answer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Answer::kTypeFieldNumber;
const int Answer::kSuccesedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Answer::Answer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.Answer)
}
Answer::Answer(const Answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&succesed_) -
    reinterpret_cast<char*>(&type_)) + sizeof(succesed_));
  // @@protoc_insertion_point(copy_constructor:proto.receiver.Answer)
}

void Answer::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succesed_) -
      reinterpret_cast<char*>(&type_)) + sizeof(succesed_));
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:proto.receiver.Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
}

void Answer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Answer& Answer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Answer_main_2eproto.base);
  return *internal_default_instance();
}


void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succesed_) -
      reinterpret_cast<char*>(&type_)) + sizeof(succesed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Answer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Answer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .proto.receiver.CommandType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::proto::receiver::CommandType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool succesed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_succesed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.Answer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.receiver.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::receiver::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool succesed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succesed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.Answer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.CommandType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool succesed = 2;
  if (this->succesed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->succesed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.Answer)
}

::google::protobuf::uint8* Answer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.CommandType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool succesed = 2;
  if (this->succesed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->succesed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.Answer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.receiver.CommandType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool succesed = 2;
  if (this->succesed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const Answer* source =
      ::google::protobuf::DynamicCastToGenerated<Answer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.Answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.Answer)
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.succesed() != 0) {
    set_succesed(from.succesed());
  }
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::Swap(Answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Answer::InternalSwap(Answer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(succesed_, other->succesed_);
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HostToClient::InitAsDefaultInstance() {
  ::proto::receiver::_HostToClient_default_instance_._instance.get_mutable()->device_set_info_ = const_cast< ::proto::receiver::DeviceSetInfo*>(
      ::proto::receiver::DeviceSetInfo::internal_default_instance());
  ::proto::receiver::_HostToClient_default_instance_._instance.get_mutable()->command_answer_ = const_cast< ::proto::receiver::Answer*>(
      ::proto::receiver::Answer::internal_default_instance());
}
class HostToClient::HasBitSetters {
 public:
  static const ::proto::receiver::DeviceSetInfo& device_set_info(const HostToClient* msg);
  static const ::proto::receiver::Answer& command_answer(const HostToClient* msg);
};

const ::proto::receiver::DeviceSetInfo&
HostToClient::HasBitSetters::device_set_info(const HostToClient* msg) {
  return *msg->device_set_info_;
}
const ::proto::receiver::Answer&
HostToClient::HasBitSetters::command_answer(const HostToClient* msg) {
  return *msg->command_answer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostToClient::kDeviceSetInfoFieldNumber;
const int HostToClient::kCommandAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostToClient::HostToClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.HostToClient)
}
HostToClient::HostToClient(const HostToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_set_info()) {
    device_set_info_ = new ::proto::receiver::DeviceSetInfo(*from.device_set_info_);
  } else {
    device_set_info_ = nullptr;
  }
  if (from.has_command_answer()) {
    command_answer_ = new ::proto::receiver::Answer(*from.command_answer_);
  } else {
    command_answer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.receiver.HostToClient)
}

void HostToClient::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HostToClient_main_2eproto.base);
  ::memset(&device_set_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_answer_) -
      reinterpret_cast<char*>(&device_set_info_)) + sizeof(command_answer_));
}

HostToClient::~HostToClient() {
  // @@protoc_insertion_point(destructor:proto.receiver.HostToClient)
  SharedDtor();
}

void HostToClient::SharedDtor() {
  if (this != internal_default_instance()) delete device_set_info_;
  if (this != internal_default_instance()) delete command_answer_;
}

void HostToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostToClient& HostToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HostToClient_main_2eproto.base);
  return *internal_default_instance();
}


void HostToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && device_set_info_ != nullptr) {
    delete device_set_info_;
  }
  device_set_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && command_answer_ != nullptr) {
    delete command_answer_;
  }
  command_answer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostToClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HostToClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .proto.receiver.DeviceSetInfo device_set_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::receiver::DeviceSetInfo::_InternalParse;
        object = msg->mutable_device_set_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .proto.receiver.Answer command_answer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::receiver::Answer::_InternalParse;
        object = msg->mutable_command_answer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.HostToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.receiver.DeviceSetInfo device_set_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_set_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.receiver.Answer command_answer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.HostToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.HostToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.DeviceSetInfo device_set_info = 1;
  if (this->has_device_set_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::device_set_info(this), output);
  }

  // .proto.receiver.Answer command_answer = 2;
  if (this->has_command_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::command_answer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.HostToClient)
}

::google::protobuf::uint8* HostToClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.HostToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.DeviceSetInfo device_set_info = 1;
  if (this->has_device_set_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::device_set_info(this), target);
  }

  // .proto.receiver.Answer command_answer = 2;
  if (this->has_command_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::command_answer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.HostToClient)
  return target;
}

size_t HostToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.HostToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.receiver.DeviceSetInfo device_set_info = 1;
  if (this->has_device_set_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *device_set_info_);
  }

  // .proto.receiver.Answer command_answer = 2;
  if (this->has_command_answer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *command_answer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const HostToClient* source =
      ::google::protobuf::DynamicCastToGenerated<HostToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.HostToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.HostToClient)
    MergeFrom(*source);
  }
}

void HostToClient::MergeFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device_set_info()) {
    mutable_device_set_info()->::proto::receiver::DeviceSetInfo::MergeFrom(from.device_set_info());
  }
  if (from.has_command_answer()) {
    mutable_command_answer()->::proto::receiver::Answer::MergeFrom(from.command_answer());
  }
}

void HostToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostToClient::CopyFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostToClient::IsInitialized() const {
  return true;
}

void HostToClient::Swap(HostToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostToClient::InternalSwap(HostToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(device_set_info_, other->device_set_info_);
  swap(command_answer_, other->command_answer_);
}

::google::protobuf::Metadata HostToClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ClientToHost::InitAsDefaultInstance() {
  ::proto::receiver::_ClientToHost_default_instance_._instance.get_mutable()->command_ = const_cast< ::proto::receiver::Command*>(
      ::proto::receiver::Command::internal_default_instance());
}
class ClientToHost::HasBitSetters {
 public:
  static const ::proto::receiver::Command& command(const ClientToHost* msg);
};

const ::proto::receiver::Command&
ClientToHost::HasBitSetters::command(const ClientToHost* msg) {
  return *msg->command_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToHost::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToHost::ClientToHost()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.receiver.ClientToHost)
}
ClientToHost::ClientToHost(const ClientToHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    command_ = new ::proto::receiver::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.receiver.ClientToHost)
}

void ClientToHost::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClientToHost_main_2eproto.base);
  command_ = nullptr;
}

ClientToHost::~ClientToHost() {
  // @@protoc_insertion_point(destructor:proto.receiver.ClientToHost)
  SharedDtor();
}

void ClientToHost::SharedDtor() {
  if (this != internal_default_instance()) delete command_;
}

void ClientToHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToHost& ClientToHost::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClientToHost_main_2eproto.base);
  return *internal_default_instance();
}


void ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.receiver.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientToHost::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClientToHost*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .proto.receiver.Command command = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::receiver::Command::_InternalParse;
        object = msg->mutable_command();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientToHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.receiver.ClientToHost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.receiver.Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.receiver.ClientToHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.receiver.ClientToHost)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientToHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.receiver.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.Command command = 1;
  if (this->has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::command(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.receiver.ClientToHost)
}

::google::protobuf::uint8* ClientToHost::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.receiver.ClientToHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.receiver.Command command = 1;
  if (this->has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::command(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.receiver.ClientToHost)
  return target;
}

size_t ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.receiver.ClientToHost)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.receiver.Command command = 1;
  if (this->has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *command_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.receiver.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToHost* source =
      ::google::protobuf::DynamicCastToGenerated<ClientToHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.receiver.ClientToHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.receiver.ClientToHost)
    MergeFrom(*source);
  }
}

void ClientToHost::MergeFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.receiver.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command()) {
    mutable_command()->::proto::receiver::Command::MergeFrom(from.command());
  }
}

void ClientToHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.receiver.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToHost::CopyFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.receiver.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToHost::IsInitialized() const {
  return true;
}

void ClientToHost::Swap(ClientToHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToHost::InternalSwap(ClientToHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::google::protobuf::Metadata ClientToHost::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_main_2eproto);
  return ::file_level_metadata_main_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace receiver
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::receiver::Preselectors* Arena::CreateMaybeMessage< ::proto::receiver::Preselectors >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::Preselectors >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::receiver::Command* Arena::CreateMaybeMessage< ::proto::receiver::Command >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::receiver::DeviceInfo* Arena::CreateMaybeMessage< ::proto::receiver::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::receiver::DeviceSetInfo* Arena::CreateMaybeMessage< ::proto::receiver::DeviceSetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::DeviceSetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::receiver::Answer* Arena::CreateMaybeMessage< ::proto::receiver::Answer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::Answer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::receiver::HostToClient* Arena::CreateMaybeMessage< ::proto::receiver::HostToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::HostToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::receiver::ClientToHost* Arena::CreateMaybeMessage< ::proto::receiver::ClientToHost >(Arena* arena) {
  return Arena::CreateInternal< ::proto::receiver::ClientToHost >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
