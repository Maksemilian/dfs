// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_set_infoT.proto

#include "device_set_infoT.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_device_5fset_5finfoT_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfoT_device_5fset_5finfoT_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fset_5finfoT_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignalFileInfoT_device_5fset_5finfoT_2eproto;
class DeviceInfoTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfoT> _instance;
} _DeviceInfoT_default_instance_;
class DeviceSetInfoTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceSetInfoT> _instance;
} _DeviceSetInfoT_default_instance_;
class SignalFileInfoTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalFileInfoT> _instance;
} _SignalFileInfoT_default_instance_;
class SignalDirectoryInfoTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalDirectoryInfoT> _instance;
} _SignalDirectoryInfoT_default_instance_;
static void InitDefaultsDeviceInfoT_device_5fset_5finfoT_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceInfoT_default_instance_;
    new (ptr) ::DeviceInfoT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceInfoT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfoT_device_5fset_5finfoT_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfoT_device_5fset_5finfoT_2eproto}, {}};

static void InitDefaultsDeviceSetInfoT_device_5fset_5finfoT_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceSetInfoT_default_instance_;
    new (ptr) ::DeviceSetInfoT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceSetInfoT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceSetInfoT_device_5fset_5finfoT_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceSetInfoT_device_5fset_5finfoT_2eproto}, {
      &scc_info_DeviceInfoT_device_5fset_5finfoT_2eproto.base,}};

static void InitDefaultsSignalFileInfoT_device_5fset_5finfoT_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignalFileInfoT_default_instance_;
    new (ptr) ::SignalFileInfoT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignalFileInfoT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignalFileInfoT_device_5fset_5finfoT_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignalFileInfoT_device_5fset_5finfoT_2eproto}, {}};

static void InitDefaultsSignalDirectoryInfoT_device_5fset_5finfoT_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignalDirectoryInfoT_default_instance_;
    new (ptr) ::SignalDirectoryInfoT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignalDirectoryInfoT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalDirectoryInfoT_device_5fset_5finfoT_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalDirectoryInfoT_device_5fset_5finfoT_2eproto}, {
      &scc_info_SignalFileInfoT_device_5fset_5finfoT_2eproto.base,}};

void InitDefaults_device_5fset_5finfoT_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfoT_device_5fset_5finfoT_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceSetInfoT_device_5fset_5finfoT_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalFileInfoT_device_5fset_5finfoT_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalDirectoryInfoT_device_5fset_5finfoT_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_device_5fset_5finfoT_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_device_5fset_5finfoT_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_device_5fset_5finfoT_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_device_5fset_5finfoT_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceInfoT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceInfoT, serial_number_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfoT, ddc_type_count_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfoT, channel_count_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfoT, interface_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfoT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfoT, device_info_),
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfoT, signal_port_),
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfoT, file_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignalFileInfoT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SignalFileInfoT, name_),
  PROTOBUF_FIELD_OFFSET(::SignalFileInfoT, size_),
  PROTOBUF_FIELD_OFFSET(::SignalFileInfoT, ddc_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignalDirectoryInfoT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SignalDirectoryInfoT, signal_file_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DeviceInfoT)},
  { 9, -1, sizeof(::DeviceSetInfoT)},
  { 17, -1, sizeof(::SignalFileInfoT)},
  { 25, -1, sizeof(::SignalDirectoryInfoT)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceInfoT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceSetInfoT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignalFileInfoT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignalDirectoryInfoT_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_device_5fset_5finfoT_2eproto = {
  {}, AddDescriptors_device_5fset_5finfoT_2eproto, "device_set_infoT.proto", schemas,
  file_default_instances, TableStruct_device_5fset_5finfoT_2eproto::offsets,
  file_level_metadata_device_5fset_5finfoT_2eproto, 4, file_level_enum_descriptors_device_5fset_5finfoT_2eproto, file_level_service_descriptors_device_5fset_5finfoT_2eproto,
};

const char descriptor_table_protodef_device_5fset_5finfoT_2eproto[] =
  "\n\026device_set_infoT.proto\"k\n\013DeviceInfoT\022"
  "\025\n\rserial_number\030\001 \001(\t\022\026\n\016ddc_type_count"
  "\030\002 \001(\007\022\025\n\rchannel_count\030\003 \001(\007\022\026\n\016interfa"
  "ce_type\030\004 \001(\t\"[\n\016DeviceSetInfoT\022!\n\013devic"
  "e_info\030\001 \003(\0132\014.DeviceInfoT\022\023\n\013signal_por"
  "t\030\002 \001(\r\022\021\n\tfile_port\030\003 \001(\r\"D\n\017SignalFile"
  "InfoT\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\r\022\025\n\rddc"
  "_frequency\030\003 \001(\r\"B\n\024SignalDirectoryInfoT"
  "\022*\n\020signal_file_info\030\001 \003(\0132\020.SignalFileI"
  "nfoTb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_device_5fset_5finfoT_2eproto = {
  false, InitDefaults_device_5fset_5finfoT_2eproto, 
  descriptor_table_protodef_device_5fset_5finfoT_2eproto,
  "device_set_infoT.proto", &assign_descriptors_table_device_5fset_5finfoT_2eproto, 372,
};

void AddDescriptors_device_5fset_5finfoT_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_device_5fset_5finfoT_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_device_5fset_5finfoT_2eproto = []() { AddDescriptors_device_5fset_5finfoT_2eproto(); return true; }();

// ===================================================================

void DeviceInfoT::InitAsDefaultInstance() {
}
class DeviceInfoT::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoT::kSerialNumberFieldNumber;
const int DeviceInfoT::kDdcTypeCountFieldNumber;
const int DeviceInfoT::kChannelCountFieldNumber;
const int DeviceInfoT::kInterfaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoT::DeviceInfoT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfoT)
}
DeviceInfoT::DeviceInfoT(const DeviceInfoT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  ::memcpy(&ddc_type_count_, &from.ddc_type_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_count_) -
    reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  // @@protoc_insertion_point(copy_constructor:DeviceInfoT)
}

void DeviceInfoT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceInfoT_device_5fset_5finfoT_2eproto.base);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
}

DeviceInfoT::~DeviceInfoT() {
  // @@protoc_insertion_point(destructor:DeviceInfoT)
  SharedDtor();
}

void DeviceInfoT::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfoT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfoT& DeviceInfoT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceInfoT_device_5fset_5finfoT_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfoT::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInfoT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceInfoT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string serial_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("DeviceInfoT.serial_number");
        object = msg->mutable_serial_number();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ddc_type_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_channel_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // string interface_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("DeviceInfoT.interface_type");
        object = msg->mutable_interface_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInfoT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfoT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceInfoT.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ddc_type_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceInfoT.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfoT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfoT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInfoT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfoT.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ddc_type_count(), output);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->channel_count(), output);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfoT.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->interface_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfoT)
}

::google::protobuf::uint8* DeviceInfoT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfoT.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ddc_type_count(), target);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->channel_count(), target);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfoT.interface_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->interface_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfoT)
  return target;
}

size_t DeviceInfoT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfoT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfoT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoT* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceInfoT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfoT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfoT)
    MergeFrom(*source);
  }
}

void DeviceInfoT::MergeFrom(const DeviceInfoT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.ddc_type_count() != 0) {
    set_ddc_type_count(from.ddc_type_count());
  }
  if (from.channel_count() != 0) {
    set_channel_count(from.channel_count());
  }
}

void DeviceInfoT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoT::CopyFrom(const DeviceInfoT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoT::IsInitialized() const {
  return true;
}

void DeviceInfoT::Swap(DeviceInfoT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoT::InternalSwap(DeviceInfoT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_type_.Swap(&other->interface_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ddc_type_count_, other->ddc_type_count_);
  swap(channel_count_, other->channel_count_);
}

::google::protobuf::Metadata DeviceInfoT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfoT_2eproto);
  return ::file_level_metadata_device_5fset_5finfoT_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeviceSetInfoT::InitAsDefaultInstance() {
}
class DeviceSetInfoT::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceSetInfoT::kDeviceInfoFieldNumber;
const int DeviceSetInfoT::kSignalPortFieldNumber;
const int DeviceSetInfoT::kFilePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceSetInfoT::DeviceSetInfoT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceSetInfoT)
}
DeviceSetInfoT::DeviceSetInfoT(const DeviceSetInfoT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      device_info_(from.device_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&signal_port_, &from.signal_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_port_) -
    reinterpret_cast<char*>(&signal_port_)) + sizeof(file_port_));
  // @@protoc_insertion_point(copy_constructor:DeviceSetInfoT)
}

void DeviceSetInfoT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceSetInfoT_device_5fset_5finfoT_2eproto.base);
  ::memset(&signal_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_port_) -
      reinterpret_cast<char*>(&signal_port_)) + sizeof(file_port_));
}

DeviceSetInfoT::~DeviceSetInfoT() {
  // @@protoc_insertion_point(destructor:DeviceSetInfoT)
  SharedDtor();
}

void DeviceSetInfoT::SharedDtor() {
}

void DeviceSetInfoT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceSetInfoT& DeviceSetInfoT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceSetInfoT_device_5fset_5finfoT_2eproto.base);
  return *internal_default_instance();
}


void DeviceSetInfoT::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSetInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_info_.Clear();
  ::memset(&signal_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_port_) -
      reinterpret_cast<char*>(&signal_port_)) + sizeof(file_port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceSetInfoT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceSetInfoT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .DeviceInfoT device_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::DeviceInfoT::_InternalParse;
          object = msg->add_device_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // uint32 signal_port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_signal_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 file_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_file_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceSetInfoT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceSetInfoT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DeviceInfoT device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 signal_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 file_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceSetInfoT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceSetInfoT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceSetInfoT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceSetInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DeviceInfoT device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_info(static_cast<int>(i)),
      output);
  }

  // uint32 signal_port = 2;
  if (this->signal_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signal_port(), output);
  }

  // uint32 file_port = 3;
  if (this->file_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceSetInfoT)
}

::google::protobuf::uint8* DeviceSetInfoT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSetInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DeviceInfoT device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_info(static_cast<int>(i)), target);
  }

  // uint32 signal_port = 2;
  if (this->signal_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->signal_port(), target);
  }

  // uint32 file_port = 3;
  if (this->file_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSetInfoT)
  return target;
}

size_t DeviceSetInfoT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSetInfoT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeviceInfoT device_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_info(static_cast<int>(i)));
    }
  }

  // uint32 signal_port = 2;
  if (this->signal_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signal_port());
  }

  // uint32 file_port = 3;
  if (this->file_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSetInfoT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceSetInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSetInfoT* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceSetInfoT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceSetInfoT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceSetInfoT)
    MergeFrom(*source);
  }
}

void DeviceSetInfoT::MergeFrom(const DeviceSetInfoT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceSetInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_info_.MergeFrom(from.device_info_);
  if (from.signal_port() != 0) {
    set_signal_port(from.signal_port());
  }
  if (from.file_port() != 0) {
    set_file_port(from.file_port());
  }
}

void DeviceSetInfoT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceSetInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSetInfoT::CopyFrom(const DeviceSetInfoT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSetInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSetInfoT::IsInitialized() const {
  return true;
}

void DeviceSetInfoT::Swap(DeviceSetInfoT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceSetInfoT::InternalSwap(DeviceSetInfoT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_info_)->InternalSwap(CastToBase(&other->device_info_));
  swap(signal_port_, other->signal_port_);
  swap(file_port_, other->file_port_);
}

::google::protobuf::Metadata DeviceSetInfoT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfoT_2eproto);
  return ::file_level_metadata_device_5fset_5finfoT_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalFileInfoT::InitAsDefaultInstance() {
}
class SignalFileInfoT::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalFileInfoT::kNameFieldNumber;
const int SignalFileInfoT::kSizeFieldNumber;
const int SignalFileInfoT::kDdcFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalFileInfoT::SignalFileInfoT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignalFileInfoT)
}
SignalFileInfoT::SignalFileInfoT(const SignalFileInfoT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddc_frequency_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ddc_frequency_));
  // @@protoc_insertion_point(copy_constructor:SignalFileInfoT)
}

void SignalFileInfoT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalFileInfoT_device_5fset_5finfoT_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddc_frequency_) -
      reinterpret_cast<char*>(&size_)) + sizeof(ddc_frequency_));
}

SignalFileInfoT::~SignalFileInfoT() {
  // @@protoc_insertion_point(destructor:SignalFileInfoT)
  SharedDtor();
}

void SignalFileInfoT::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignalFileInfoT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalFileInfoT& SignalFileInfoT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalFileInfoT_device_5fset_5finfoT_2eproto.base);
  return *internal_default_instance();
}


void SignalFileInfoT::Clear() {
// @@protoc_insertion_point(message_clear_start:SignalFileInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddc_frequency_) -
      reinterpret_cast<char*>(&size_)) + sizeof(ddc_frequency_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalFileInfoT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalFileInfoT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SignalFileInfoT.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ddc_frequency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ddc_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalFileInfoT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignalFileInfoT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalFileInfoT.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc_frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignalFileInfoT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignalFileInfoT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalFileInfoT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignalFileInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalFileInfoT.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // uint32 ddc_frequency = 3;
  if (this->ddc_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ddc_frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignalFileInfoT)
}

::google::protobuf::uint8* SignalFileInfoT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignalFileInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalFileInfoT.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // uint32 ddc_frequency = 3;
  if (this->ddc_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ddc_frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignalFileInfoT)
  return target;
}

size_t SignalFileInfoT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignalFileInfoT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint32 ddc_frequency = 3;
  if (this->ddc_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalFileInfoT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignalFileInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalFileInfoT* source =
      ::google::protobuf::DynamicCastToGenerated<SignalFileInfoT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignalFileInfoT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignalFileInfoT)
    MergeFrom(*source);
  }
}

void SignalFileInfoT::MergeFrom(const SignalFileInfoT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignalFileInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.ddc_frequency() != 0) {
    set_ddc_frequency(from.ddc_frequency());
  }
}

void SignalFileInfoT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignalFileInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalFileInfoT::CopyFrom(const SignalFileInfoT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignalFileInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalFileInfoT::IsInitialized() const {
  return true;
}

void SignalFileInfoT::Swap(SignalFileInfoT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalFileInfoT::InternalSwap(SignalFileInfoT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(ddc_frequency_, other->ddc_frequency_);
}

::google::protobuf::Metadata SignalFileInfoT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfoT_2eproto);
  return ::file_level_metadata_device_5fset_5finfoT_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalDirectoryInfoT::InitAsDefaultInstance() {
}
class SignalDirectoryInfoT::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalDirectoryInfoT::kSignalFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalDirectoryInfoT::SignalDirectoryInfoT()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignalDirectoryInfoT)
}
SignalDirectoryInfoT::SignalDirectoryInfoT(const SignalDirectoryInfoT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      signal_file_info_(from.signal_file_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SignalDirectoryInfoT)
}

void SignalDirectoryInfoT::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalDirectoryInfoT_device_5fset_5finfoT_2eproto.base);
}

SignalDirectoryInfoT::~SignalDirectoryInfoT() {
  // @@protoc_insertion_point(destructor:SignalDirectoryInfoT)
  SharedDtor();
}

void SignalDirectoryInfoT::SharedDtor() {
}

void SignalDirectoryInfoT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalDirectoryInfoT& SignalDirectoryInfoT::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalDirectoryInfoT_device_5fset_5finfoT_2eproto.base);
  return *internal_default_instance();
}


void SignalDirectoryInfoT::Clear() {
// @@protoc_insertion_point(message_clear_start:SignalDirectoryInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_file_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalDirectoryInfoT::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalDirectoryInfoT*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .SignalFileInfoT signal_file_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SignalFileInfoT::_InternalParse;
          object = msg->add_signal_file_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalDirectoryInfoT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignalDirectoryInfoT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SignalFileInfoT signal_file_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignalDirectoryInfoT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignalDirectoryInfoT)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalDirectoryInfoT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignalDirectoryInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SignalFileInfoT signal_file_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_file_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signal_file_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignalDirectoryInfoT)
}

::google::protobuf::uint8* SignalDirectoryInfoT::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignalDirectoryInfoT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SignalFileInfoT signal_file_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_file_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signal_file_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignalDirectoryInfoT)
  return target;
}

size_t SignalDirectoryInfoT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignalDirectoryInfoT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SignalFileInfoT signal_file_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_file_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal_file_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalDirectoryInfoT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignalDirectoryInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalDirectoryInfoT* source =
      ::google::protobuf::DynamicCastToGenerated<SignalDirectoryInfoT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignalDirectoryInfoT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignalDirectoryInfoT)
    MergeFrom(*source);
  }
}

void SignalDirectoryInfoT::MergeFrom(const SignalDirectoryInfoT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignalDirectoryInfoT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_file_info_.MergeFrom(from.signal_file_info_);
}

void SignalDirectoryInfoT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignalDirectoryInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalDirectoryInfoT::CopyFrom(const SignalDirectoryInfoT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignalDirectoryInfoT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalDirectoryInfoT::IsInitialized() const {
  return true;
}

void SignalDirectoryInfoT::Swap(SignalDirectoryInfoT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalDirectoryInfoT::InternalSwap(SignalDirectoryInfoT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signal_file_info_)->InternalSwap(CastToBase(&other->signal_file_info_));
}

::google::protobuf::Metadata SignalDirectoryInfoT::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfoT_2eproto);
  return ::file_level_metadata_device_5fset_5finfoT_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::DeviceInfoT* Arena::CreateMaybeMessage< ::DeviceInfoT >(Arena* arena) {
  return Arena::CreateInternal< ::DeviceInfoT >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceSetInfoT* Arena::CreateMaybeMessage< ::DeviceSetInfoT >(Arena* arena) {
  return Arena::CreateInternal< ::DeviceSetInfoT >(arena);
}
template<> PROTOBUF_NOINLINE ::SignalFileInfoT* Arena::CreateMaybeMessage< ::SignalFileInfoT >(Arena* arena) {
  return Arena::CreateInternal< ::SignalFileInfoT >(arena);
}
template<> PROTOBUF_NOINLINE ::SignalDirectoryInfoT* Arena::CreateMaybeMessage< ::SignalDirectoryInfoT >(Arena* arena) {
  return Arena::CreateInternal< ::SignalDirectoryInfoT >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
