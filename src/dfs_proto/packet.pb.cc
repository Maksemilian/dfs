// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet> _instance;
} _Packet_default_instance_;
static void InitDefaultsPacket_packet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Packet_default_instance_;
    new (ptr) ::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Packet_packet_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPacket_packet_2eproto}, {}};

void InitDefaults_packet_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Packet_packet_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_packet_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_packet_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_packet_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Packet, block_number_),
  PROTOBUF_FIELD_OFFSET(::Packet, ddc1_frequency_),
  PROTOBUF_FIELD_OFFSET(::Packet, attenuator_),
  PROTOBUF_FIELD_OFFSET(::Packet, block_size_),
  PROTOBUF_FIELD_OFFSET(::Packet, device_count_),
  PROTOBUF_FIELD_OFFSET(::Packet, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::Packet, time_of_week_),
  PROTOBUF_FIELD_OFFSET(::Packet, week_number_),
  PROTOBUF_FIELD_OFFSET(::Packet, ddc_sample_counter_),
  PROTOBUF_FIELD_OFFSET(::Packet, adc_period_counter_),
  PROTOBUF_FIELD_OFFSET(::Packet, sample_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Packet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Packet_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_packet_2eproto = {
  {}, AddDescriptors_packet_2eproto, "packet.proto", schemas,
  file_default_instances, TableStruct_packet_2eproto::offsets,
  file_level_metadata_packet_2eproto, 1, file_level_enum_descriptors_packet_2eproto, file_level_service_descriptors_packet_2eproto,
};

const char descriptor_table_protodef_packet_2eproto[] =
  "\n\014packet.proto\"\374\001\n\006Packet\022\024\n\014block_numbe"
  "r\030\001 \001(\r\022\026\n\016ddc1_frequency\030\002 \001(\r\022\022\n\natten"
  "uator\030\003 \001(\r\022\022\n\nblock_size\030\004 \001(\r\022\024\n\014devic"
  "e_count\030\005 \001(\r\022\023\n\013sample_rate\030\006 \001(\r\022\024\n\014ti"
  "me_of_week\030\007 \001(\r\022\023\n\013week_number\030\010 \001(\r\022\032\n"
  "\022ddc_sample_counter\030\t \001(\001\022\032\n\022adc_period_"
  "counter\030\n \001(\004\022\016\n\006sample\030\013 \003(\002b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_packet_2eproto = {
  false, InitDefaults_packet_2eproto, 
  descriptor_table_protodef_packet_2eproto,
  "packet.proto", &assign_descriptors_table_packet_2eproto, 277,
};

void AddDescriptors_packet_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_packet_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_packet_2eproto = []() { AddDescriptors_packet_2eproto(); return true; }();

// ===================================================================

void Packet::InitAsDefaultInstance() {
}
class Packet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kBlockNumberFieldNumber;
const int Packet::kDdc1FrequencyFieldNumber;
const int Packet::kAttenuatorFieldNumber;
const int Packet::kBlockSizeFieldNumber;
const int Packet::kDeviceCountFieldNumber;
const int Packet::kSampleRateFieldNumber;
const int Packet::kTimeOfWeekFieldNumber;
const int Packet::kWeekNumberFieldNumber;
const int Packet::kDdcSampleCounterFieldNumber;
const int Packet::kAdcPeriodCounterFieldNumber;
const int Packet::kSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sample_(from.sample_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block_number_, &from.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_period_counter_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(adc_period_counter_));
  // @@protoc_insertion_point(copy_constructor:Packet)
}

void Packet::SharedCtor() {
  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_period_counter_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(adc_period_counter_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packet& Packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Packet_packet_2eproto.base);
  return *internal_default_instance();
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_.Clear();
  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_period_counter_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(adc_period_counter_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Packet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Packet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 block_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_block_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ddc1_frequency = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ddc1_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 attenuator = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_attenuator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 block_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_block_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 device_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_device_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 sample_rate = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_sample_rate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 time_of_week = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_time_of_week(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 week_number = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_week_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double ddc_sample_counter = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_ddc_sample_counter(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // uint64 adc_period_counter = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_adc_period_counter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated float sample = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) == 90) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_sample();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        do {
          msg->add_sample(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 93 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 block_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc1_frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc1_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 attenuator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attenuator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 block_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 device_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sample_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_of_week = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_of_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 week_number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ddc_sample_counter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddc_sample_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 adc_period_counter = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adc_period_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sample = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sample())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_sample())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_number = 1;
  if (this->block_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_number(), output);
  }

  // uint32 ddc1_frequency = 2;
  if (this->ddc1_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ddc1_frequency(), output);
  }

  // uint32 attenuator = 3;
  if (this->attenuator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attenuator(), output);
  }

  // uint32 block_size = 4;
  if (this->block_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->block_size(), output);
  }

  // uint32 device_count = 5;
  if (this->device_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->device_count(), output);
  }

  // uint32 sample_rate = 6;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sample_rate(), output);
  }

  // uint32 time_of_week = 7;
  if (this->time_of_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time_of_week(), output);
  }

  // uint32 week_number = 8;
  if (this->week_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->week_number(), output);
  }

  // double ddc_sample_counter = 9;
  if (this->ddc_sample_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ddc_sample_counter(), output);
  }

  // uint64 adc_period_counter = 10;
  if (this->adc_period_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->adc_period_counter(), output);
  }

  // repeated float sample = 11;
  if (this->sample_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sample_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->sample().data(), this->sample_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_number = 1;
  if (this->block_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_number(), target);
  }

  // uint32 ddc1_frequency = 2;
  if (this->ddc1_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ddc1_frequency(), target);
  }

  // uint32 attenuator = 3;
  if (this->attenuator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attenuator(), target);
  }

  // uint32 block_size = 4;
  if (this->block_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->block_size(), target);
  }

  // uint32 device_count = 5;
  if (this->device_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->device_count(), target);
  }

  // uint32 sample_rate = 6;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sample_rate(), target);
  }

  // uint32 time_of_week = 7;
  if (this->time_of_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time_of_week(), target);
  }

  // uint32 week_number = 8;
  if (this->week_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->week_number(), target);
  }

  // double ddc_sample_counter = 9;
  if (this->ddc_sample_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ddc_sample_counter(), target);
  }

  // uint64 adc_period_counter = 10;
  if (this->adc_period_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->adc_period_counter(), target);
  }

  // repeated float sample = 11;
  if (this->sample_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _sample_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sample_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Packet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sample = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->sample_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _sample_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 block_number = 1;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_number());
  }

  // uint32 ddc1_frequency = 2;
  if (this->ddc1_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc1_frequency());
  }

  // uint32 attenuator = 3;
  if (this->attenuator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attenuator());
  }

  // uint32 block_size = 4;
  if (this->block_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_size());
  }

  // uint32 device_count = 5;
  if (this->device_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_count());
  }

  // uint32 sample_rate = 6;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sample_rate());
  }

  // uint32 time_of_week = 7;
  if (this->time_of_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_of_week());
  }

  // uint32 week_number = 8;
  if (this->week_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->week_number());
  }

  // double ddc_sample_counter = 9;
  if (this->ddc_sample_counter() != 0) {
    total_size += 1 + 8;
  }

  // uint64 adc_period_counter = 10;
  if (this->adc_period_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->adc_period_counter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::DynamicCastToGenerated<Packet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_.MergeFrom(from.sample_);
  if (from.block_number() != 0) {
    set_block_number(from.block_number());
  }
  if (from.ddc1_frequency() != 0) {
    set_ddc1_frequency(from.ddc1_frequency());
  }
  if (from.attenuator() != 0) {
    set_attenuator(from.attenuator());
  }
  if (from.block_size() != 0) {
    set_block_size(from.block_size());
  }
  if (from.device_count() != 0) {
    set_device_count(from.device_count());
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
  if (from.time_of_week() != 0) {
    set_time_of_week(from.time_of_week());
  }
  if (from.week_number() != 0) {
    set_week_number(from.week_number());
  }
  if (from.ddc_sample_counter() != 0) {
    set_ddc_sample_counter(from.ddc_sample_counter());
  }
  if (from.adc_period_counter() != 0) {
    set_adc_period_counter(from.adc_period_counter());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sample_.InternalSwap(&other->sample_);
  swap(block_number_, other->block_number_);
  swap(ddc1_frequency_, other->ddc1_frequency_);
  swap(attenuator_, other->attenuator_);
  swap(block_size_, other->block_size_);
  swap(device_count_, other->device_count_);
  swap(sample_rate_, other->sample_rate_);
  swap(time_of_week_, other->time_of_week_);
  swap(week_number_, other->week_number_);
  swap(ddc_sample_counter_, other->ddc_sample_counter_);
  swap(adc_period_counter_, other->adc_period_counter_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_packet_2eproto);
  return ::file_level_metadata_packet_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Packet* Arena::CreateMaybeMessage< ::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::Packet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
