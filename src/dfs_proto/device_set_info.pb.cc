// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_set_info.proto

#include "device_set_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_device_5fset_5finfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_device_5fset_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fset_5finfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignalFileInfo_device_5fset_5finfo_2eproto;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class DeviceSetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceSetInfo> _instance;
} _DeviceSetInfo_default_instance_;
class SignalFileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalFileInfo> _instance;
} _SignalFileInfo_default_instance_;
class SignalDirectoryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalDirectoryInfo> _instance;
} _SignalDirectoryInfo_default_instance_;
static void InitDefaultsDeviceInfo_device_5fset_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceInfo_default_instance_;
    new (ptr) ::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_device_5fset_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo_device_5fset_5finfo_2eproto}, {}};

static void InitDefaultsDeviceSetInfo_device_5fset_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceSetInfo_default_instance_;
    new (ptr) ::DeviceSetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceSetInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceSetInfo_device_5fset_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceSetInfo_device_5fset_5finfo_2eproto}, {
      &scc_info_DeviceInfo_device_5fset_5finfo_2eproto.base,}};

static void InitDefaultsSignalFileInfo_device_5fset_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignalFileInfo_default_instance_;
    new (ptr) ::SignalFileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignalFileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignalFileInfo_device_5fset_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignalFileInfo_device_5fset_5finfo_2eproto}, {}};

static void InitDefaultsSignalDirectoryInfo_device_5fset_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignalDirectoryInfo_default_instance_;
    new (ptr) ::SignalDirectoryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignalDirectoryInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalDirectoryInfo_device_5fset_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalDirectoryInfo_device_5fset_5finfo_2eproto}, {
      &scc_info_SignalFileInfo_device_5fset_5finfo_2eproto.base,}};

void InitDefaults_device_5fset_5finfo_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo_device_5fset_5finfo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceSetInfo_device_5fset_5finfo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalFileInfo_device_5fset_5finfo_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalDirectoryInfo_device_5fset_5finfo_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_device_5fset_5finfo_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_device_5fset_5finfo_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_device_5fset_5finfo_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_device_5fset_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, serial_number_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, ddc_type_count_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, channel_count_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, interface_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfo, device_info_),
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfo, signal_port_),
  PROTOBUF_FIELD_OFFSET(::DeviceSetInfo, file_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignalFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SignalFileInfo, name_),
  PROTOBUF_FIELD_OFFSET(::SignalFileInfo, size_),
  PROTOBUF_FIELD_OFFSET(::SignalFileInfo, ddc_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignalDirectoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SignalDirectoryInfo, signal_file_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DeviceInfo)},
  { 9, -1, sizeof(::DeviceSetInfo)},
  { 17, -1, sizeof(::SignalFileInfo)},
  { 25, -1, sizeof(::SignalDirectoryInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DeviceSetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignalFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignalDirectoryInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_device_5fset_5finfo_2eproto = {
  {}, AddDescriptors_device_5fset_5finfo_2eproto, "device_set_info.proto", schemas,
  file_default_instances, TableStruct_device_5fset_5finfo_2eproto::offsets,
  file_level_metadata_device_5fset_5finfo_2eproto, 4, file_level_enum_descriptors_device_5fset_5finfo_2eproto, file_level_service_descriptors_device_5fset_5finfo_2eproto,
};

const char descriptor_table_protodef_device_5fset_5finfo_2eproto[] =
  "\n\025device_set_info.proto\"j\n\nDeviceInfo\022\025\n"
  "\rserial_number\030\001 \001(\t\022\026\n\016ddc_type_count\030\002"
  " \001(\007\022\025\n\rchannel_count\030\003 \001(\007\022\026\n\016interface"
  "_type\030\004 \001(\t\"Y\n\rDeviceSetInfo\022 \n\013device_i"
  "nfo\030\001 \003(\0132\013.DeviceInfo\022\023\n\013signal_port\030\002 "
  "\001(\r\022\021\n\tfile_port\030\003 \001(\r\"C\n\016SignalFileInfo"
  "\022\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\r\022\025\n\rddc_freq"
  "uency\030\003 \001(\r\"@\n\023SignalDirectoryInfo\022)\n\020si"
  "gnal_file_info\030\001 \003(\0132\017.SignalFileInfob\006p"
  "roto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_device_5fset_5finfo_2eproto = {
  false, InitDefaults_device_5fset_5finfo_2eproto, 
  descriptor_table_protodef_device_5fset_5finfo_2eproto,
  "device_set_info.proto", &assign_descriptors_table_device_5fset_5finfo_2eproto, 365,
};

void AddDescriptors_device_5fset_5finfo_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_device_5fset_5finfo_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_device_5fset_5finfo_2eproto = []() { AddDescriptors_device_5fset_5finfo_2eproto(); return true; }();

// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kSerialNumberFieldNumber;
const int DeviceInfo::kDdcTypeCountFieldNumber;
const int DeviceInfo::kChannelCountFieldNumber;
const int DeviceInfo::kInterfaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interface_type().size() > 0) {
    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  ::memcpy(&ddc_type_count_, &from.ddc_type_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_count_) -
    reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  // @@protoc_insertion_point(copy_constructor:DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceInfo_device_5fset_5finfo_2eproto.base);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceInfo_device_5fset_5finfo_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ddc_type_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_count_) -
      reinterpret_cast<char*>(&ddc_type_count_)) + sizeof(channel_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string serial_number = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("DeviceInfo.serial_number");
        object = msg->mutable_serial_number();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ddc_type_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_channel_count(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // string interface_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("DeviceInfo.interface_type");
        object = msg->mutable_interface_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string serial_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceInfo.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ddc_type_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ddc_type_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 channel_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string interface_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interface_type().data(), static_cast<int>(this->interface_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceInfo.interface_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serial_number(), output);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ddc_type_count(), output);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->channel_count(), output);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.interface_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->interface_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serial_number(), target);
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ddc_type_count(), target);
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->channel_count(), target);
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interface_type().data(), static_cast<int>(this->interface_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.interface_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->interface_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string interface_type = 4;
  if (this->interface_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interface_type());
  }

  // fixed32 ddc_type_count = 2;
  if (this->ddc_type_count() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 channel_count = 3;
  if (this->channel_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.interface_type().size() > 0) {

    interface_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_type_);
  }
  if (from.ddc_type_count() != 0) {
    set_ddc_type_count(from.ddc_type_count());
  }
  if (from.channel_count() != 0) {
    set_channel_count(from.channel_count());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_type_.Swap(&other->interface_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ddc_type_count_, other->ddc_type_count_);
  swap(channel_count_, other->channel_count_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfo_2eproto);
  return ::file_level_metadata_device_5fset_5finfo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeviceSetInfo::InitAsDefaultInstance() {
}
class DeviceSetInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceSetInfo::kDeviceInfoFieldNumber;
const int DeviceSetInfo::kSignalPortFieldNumber;
const int DeviceSetInfo::kFilePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceSetInfo::DeviceSetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceSetInfo)
}
DeviceSetInfo::DeviceSetInfo(const DeviceSetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      device_info_(from.device_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&signal_port_, &from.signal_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_port_) -
    reinterpret_cast<char*>(&signal_port_)) + sizeof(file_port_));
  // @@protoc_insertion_point(copy_constructor:DeviceSetInfo)
}

void DeviceSetInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceSetInfo_device_5fset_5finfo_2eproto.base);
  ::memset(&signal_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_port_) -
      reinterpret_cast<char*>(&signal_port_)) + sizeof(file_port_));
}

DeviceSetInfo::~DeviceSetInfo() {
  // @@protoc_insertion_point(destructor:DeviceSetInfo)
  SharedDtor();
}

void DeviceSetInfo::SharedDtor() {
}

void DeviceSetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceSetInfo& DeviceSetInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceSetInfo_device_5fset_5finfo_2eproto.base);
  return *internal_default_instance();
}


void DeviceSetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_info_.Clear();
  ::memset(&signal_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_port_) -
      reinterpret_cast<char*>(&signal_port_)) + sizeof(file_port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceSetInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceSetInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .DeviceInfo device_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::DeviceInfo::_InternalParse;
          object = msg->add_device_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // uint32 signal_port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_signal_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 file_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_file_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceSetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceSetInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DeviceInfo device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 signal_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 file_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceSetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceSetInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceSetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DeviceInfo device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->device_info(static_cast<int>(i)),
      output);
  }

  // uint32 signal_port = 2;
  if (this->signal_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signal_port(), output);
  }

  // uint32 file_port = 3;
  if (this->file_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceSetInfo)
}

::google::protobuf::uint8* DeviceSetInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DeviceInfo device_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->device_info(static_cast<int>(i)), target);
  }

  // uint32 signal_port = 2;
  if (this->signal_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->signal_port(), target);
  }

  // uint32 file_port = 3;
  if (this->file_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSetInfo)
  return target;
}

size_t DeviceSetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeviceInfo device_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->device_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_info(static_cast<int>(i)));
    }
  }

  // uint32 signal_port = 2;
  if (this->signal_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signal_port());
  }

  // uint32 file_port = 3;
  if (this->file_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSetInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceSetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceSetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceSetInfo)
    MergeFrom(*source);
  }
}

void DeviceSetInfo::MergeFrom(const DeviceSetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_info_.MergeFrom(from.device_info_);
  if (from.signal_port() != 0) {
    set_signal_port(from.signal_port());
  }
  if (from.file_port() != 0) {
    set_file_port(from.file_port());
  }
}

void DeviceSetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSetInfo::CopyFrom(const DeviceSetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSetInfo::IsInitialized() const {
  return true;
}

void DeviceSetInfo::Swap(DeviceSetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceSetInfo::InternalSwap(DeviceSetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&device_info_)->InternalSwap(CastToBase(&other->device_info_));
  swap(signal_port_, other->signal_port_);
  swap(file_port_, other->file_port_);
}

::google::protobuf::Metadata DeviceSetInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfo_2eproto);
  return ::file_level_metadata_device_5fset_5finfo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalFileInfo::InitAsDefaultInstance() {
}
class SignalFileInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalFileInfo::kNameFieldNumber;
const int SignalFileInfo::kSizeFieldNumber;
const int SignalFileInfo::kDdcFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalFileInfo::SignalFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignalFileInfo)
}
SignalFileInfo::SignalFileInfo(const SignalFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddc_frequency_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ddc_frequency_));
  // @@protoc_insertion_point(copy_constructor:SignalFileInfo)
}

void SignalFileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalFileInfo_device_5fset_5finfo_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddc_frequency_) -
      reinterpret_cast<char*>(&size_)) + sizeof(ddc_frequency_));
}

SignalFileInfo::~SignalFileInfo() {
  // @@protoc_insertion_point(destructor:SignalFileInfo)
  SharedDtor();
}

void SignalFileInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignalFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalFileInfo& SignalFileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalFileInfo_device_5fset_5finfo_2eproto.base);
  return *internal_default_instance();
}


void SignalFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SignalFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddc_frequency_) -
      reinterpret_cast<char*>(&size_)) + sizeof(ddc_frequency_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalFileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalFileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("SignalFileInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ddc_frequency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ddc_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignalFileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalFileInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc_frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignalFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignalFileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignalFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalFileInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // uint32 ddc_frequency = 3;
  if (this->ddc_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ddc_frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignalFileInfo)
}

::google::protobuf::uint8* SignalFileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignalFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalFileInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // uint32 ddc_frequency = 3;
  if (this->ddc_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ddc_frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignalFileInfo)
  return target;
}

size_t SignalFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignalFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint32 ddc_frequency = 3;
  if (this->ddc_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignalFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalFileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<SignalFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignalFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignalFileInfo)
    MergeFrom(*source);
  }
}

void SignalFileInfo::MergeFrom(const SignalFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignalFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.ddc_frequency() != 0) {
    set_ddc_frequency(from.ddc_frequency());
  }
}

void SignalFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignalFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalFileInfo::CopyFrom(const SignalFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignalFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalFileInfo::IsInitialized() const {
  return true;
}

void SignalFileInfo::Swap(SignalFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalFileInfo::InternalSwap(SignalFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(ddc_frequency_, other->ddc_frequency_);
}

::google::protobuf::Metadata SignalFileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfo_2eproto);
  return ::file_level_metadata_device_5fset_5finfo_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalDirectoryInfo::InitAsDefaultInstance() {
}
class SignalDirectoryInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalDirectoryInfo::kSignalFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalDirectoryInfo::SignalDirectoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignalDirectoryInfo)
}
SignalDirectoryInfo::SignalDirectoryInfo(const SignalDirectoryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      signal_file_info_(from.signal_file_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SignalDirectoryInfo)
}

void SignalDirectoryInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalDirectoryInfo_device_5fset_5finfo_2eproto.base);
}

SignalDirectoryInfo::~SignalDirectoryInfo() {
  // @@protoc_insertion_point(destructor:SignalDirectoryInfo)
  SharedDtor();
}

void SignalDirectoryInfo::SharedDtor() {
}

void SignalDirectoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalDirectoryInfo& SignalDirectoryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalDirectoryInfo_device_5fset_5finfo_2eproto.base);
  return *internal_default_instance();
}


void SignalDirectoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SignalDirectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_file_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalDirectoryInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalDirectoryInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .SignalFileInfo signal_file_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SignalFileInfo::_InternalParse;
          object = msg->add_signal_file_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalDirectoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignalDirectoryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SignalFileInfo signal_file_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignalDirectoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignalDirectoryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalDirectoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignalDirectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SignalFileInfo signal_file_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_file_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signal_file_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignalDirectoryInfo)
}

::google::protobuf::uint8* SignalDirectoryInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignalDirectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SignalFileInfo signal_file_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_file_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signal_file_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignalDirectoryInfo)
  return target;
}

size_t SignalDirectoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignalDirectoryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SignalFileInfo signal_file_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_file_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal_file_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalDirectoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignalDirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalDirectoryInfo* source =
      ::google::protobuf::DynamicCastToGenerated<SignalDirectoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignalDirectoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignalDirectoryInfo)
    MergeFrom(*source);
  }
}

void SignalDirectoryInfo::MergeFrom(const SignalDirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignalDirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_file_info_.MergeFrom(from.signal_file_info_);
}

void SignalDirectoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignalDirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalDirectoryInfo::CopyFrom(const SignalDirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignalDirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalDirectoryInfo::IsInitialized() const {
  return true;
}

void SignalDirectoryInfo::Swap(SignalDirectoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalDirectoryInfo::InternalSwap(SignalDirectoryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signal_file_info_)->InternalSwap(CastToBase(&other->signal_file_info_));
}

::google::protobuf::Metadata SignalDirectoryInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_device_5fset_5finfo_2eproto);
  return ::file_level_metadata_device_5fset_5finfo_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::DeviceInfo* Arena::CreateMaybeMessage< ::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceSetInfo* Arena::CreateMaybeMessage< ::DeviceSetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::DeviceSetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SignalFileInfo* Arena::CreateMaybeMessage< ::SignalFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SignalFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SignalDirectoryInfo* Arena::CreateMaybeMessage< ::SignalDirectoryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SignalDirectoryInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
