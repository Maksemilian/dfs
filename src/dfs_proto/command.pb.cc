// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Preselectors_command_2eproto;
class PreselectorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Preselectors> _instance;
} _Preselectors_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class AnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Answer> _instance;
} _Answer_default_instance_;
class ConnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectRequest> _instance;
} _ConnectRequest_default_instance_;
class FileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileRequest> _instance;
} _FileRequest_default_instance_;
static void InitDefaultsPreselectors_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Preselectors_default_instance_;
    new (ptr) ::Preselectors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Preselectors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Preselectors_command_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreselectors_command_2eproto}, {}};

static void InitDefaultsCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Command_default_instance_;
    new (ptr) ::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Command_command_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommand_command_2eproto}, {
      &scc_info_Preselectors_command_2eproto.base,}};

static void InitDefaultsAnswer_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Answer_default_instance_;
    new (ptr) ::Answer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Answer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Answer_command_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnswer_command_2eproto}, {}};

static void InitDefaultsConnectRequest_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectRequest_default_instance_;
    new (ptr) ::ConnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConnectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectRequest_command_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectRequest_command_2eproto}, {}};

static void InitDefaultsFileRequest_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileRequest_default_instance_;
    new (ptr) ::FileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileRequest_command_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileRequest_command_2eproto}, {}};

void InitDefaults_command_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Preselectors_command_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command_command_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Answer_command_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectRequest_command_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileRequest_command_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_command_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_command_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_command_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_command_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Preselectors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Preselectors, low_frequency_),
  PROTOBUF_FIELD_OFFSET(::Preselectors, high_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Command, command_type_),
  PROTOBUF_FIELD_OFFSET(::Command, attenuator_),
  PROTOBUF_FIELD_OFFSET(::Command, preselectors_),
  PROTOBUF_FIELD_OFFSET(::Command, preamplifier_enebled_),
  PROTOBUF_FIELD_OFFSET(::Command, adc_noice_blanker_enebled_),
  PROTOBUF_FIELD_OFFSET(::Command, adc_noice_blanker_threshold_),
  PROTOBUF_FIELD_OFFSET(::Command, ddc1_frequency_),
  PROTOBUF_FIELD_OFFSET(::Command, ddc1_type_),
  PROTOBUF_FIELD_OFFSET(::Command, start_ddc1_),
  PROTOBUF_FIELD_OFFSET(::Command, samples_per_buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Answer, type_),
  PROTOBUF_FIELD_OFFSET(::Answer, succesed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::FileRequest, file_position_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Preselectors)},
  { 7, -1, sizeof(::Command)},
  { 22, -1, sizeof(::Answer)},
  { 29, -1, sizeof(::ConnectRequest)},
  { 35, -1, sizeof(::FileRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Preselectors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Answer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FileRequest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_command_2eproto = {
  {}, AddDescriptors_command_2eproto, "command.proto", schemas,
  file_default_instances, TableStruct_command_2eproto::offsets,
  file_level_metadata_command_2eproto, 5, file_level_enum_descriptors_command_2eproto, file_level_service_descriptors_command_2eproto,
};

const char descriptor_table_protodef_command_2eproto[] =
  "\n\rcommand.proto\"=\n\014Preselectors\022\025\n\rlow_f"
  "requency\030\001 \001(\r\022\026\n\016high_frequency\030\002 \001(\r\"\247"
  "\002\n\007Command\022\"\n\014command_type\030\001 \001(\0162\014.Comma"
  "ndType\022\022\n\nattenuator\030\002 \001(\r\022#\n\014preselecto"
  "rs\030\003 \001(\0132\r.Preselectors\022\034\n\024preamplifier_"
  "enebled\030\004 \001(\010\022!\n\031adc_noice_blanker_enebl"
  "ed\030\005 \001(\010\022#\n\033adc_noice_blanker_threshold\030"
  "\006 \001(\014\022\026\n\016ddc1_frequency\030\007 \001(\r\022\021\n\tddc1_ty"
  "pe\030\010 \001(\r\022\022\n\nstart_ddc1\030\t \001(\010\022\032\n\022samples_"
  "per_buffer\030\n \001(\r\"6\n\006Answer\022\032\n\004type\030\001 \001(\016"
  "2\014.CommandType\022\020\n\010succesed\030\002 \001(\010\"h\n\016Conn"
  "ectRequest\022\"\n\004type\030\001 \001(\0162\024.ConnectReques"
  "t.Type\"2\n\004Type\022\016\n\nCT_COMMAND\020\000\022\r\n\tCT_STR"
  "EAM\020\001\022\013\n\007CT_FILE\020\002\"_\n\013FileRequest\022\021\n\tfil"
  "e_name\030\003 \001(\t\022\025\n\rfile_position\030\004 \001(\003\"&\n\004T"
  "ype\022\r\n\tTYPE_LOAD\020\000\022\017\n\013TYPE_REMOVE\020\001*\236\002\n\013"
  "CommandType\022\021\n\rSET_POWER_OFF\020\000\022\020\n\014SET_PO"
  "WER_ON\020\001\022\022\n\016SET_ATTENUATOR\020\002\022\024\n\020SET_PRES"
  "ELECTORS\020\003\022\034\n\030SET_PREAMPLIFIER_ENABLED\020\004"
  "\022!\n\035SET_ADC_NOICE_BLANKER_ENABLED\020\005\022#\n\037S"
  "ET_ADC_NOICE_BLANKER_THRESHOLD\020\006\022\026\n\022SET_"
  "DDC1_FREQUENCY\020\007\022\021\n\rSET_DDC1_TYPE\020\010\022\020\n\014S"
  "ET_SETTINGS\020\t\022\016\n\nSTART_DDC1\020\n\022\r\n\tSTOP_DD"
  "C1\020\013b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_command_2eproto = {
  false, InitDefaults_command_2eproto, 
  descriptor_table_protodef_command_2eproto,
  "command.proto", &assign_descriptors_table_command_2eproto, 932,
};

void AddDescriptors_command_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_command_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_command_2eproto = []() { AddDescriptors_command_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* ConnectRequest_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[0];
}
bool ConnectRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectRequest_Type ConnectRequest::CT_COMMAND;
const ConnectRequest_Type ConnectRequest::CT_STREAM;
const ConnectRequest_Type ConnectRequest::CT_FILE;
const ConnectRequest_Type ConnectRequest::Type_MIN;
const ConnectRequest_Type ConnectRequest::Type_MAX;
const int ConnectRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FileRequest_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[1];
}
bool FileRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FileRequest_Type FileRequest::TYPE_LOAD;
const FileRequest_Type FileRequest::TYPE_REMOVE;
const FileRequest_Type FileRequest::Type_MIN;
const FileRequest_Type FileRequest::Type_MAX;
const int FileRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[2];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Preselectors::InitAsDefaultInstance() {
}
class Preselectors::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preselectors::kLowFrequencyFieldNumber;
const int Preselectors::kHighFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preselectors::Preselectors()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Preselectors)
}
Preselectors::Preselectors(const Preselectors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_frequency_, &from.low_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_frequency_) -
    reinterpret_cast<char*>(&low_frequency_)) + sizeof(high_frequency_));
  // @@protoc_insertion_point(copy_constructor:Preselectors)
}

void Preselectors::SharedCtor() {
  ::memset(&low_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_frequency_) -
      reinterpret_cast<char*>(&low_frequency_)) + sizeof(high_frequency_));
}

Preselectors::~Preselectors() {
  // @@protoc_insertion_point(destructor:Preselectors)
  SharedDtor();
}

void Preselectors::SharedDtor() {
}

void Preselectors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Preselectors& Preselectors::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Preselectors_command_2eproto.base);
  return *internal_default_instance();
}


void Preselectors::Clear() {
// @@protoc_insertion_point(message_clear_start:Preselectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&low_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_frequency_) -
      reinterpret_cast<char*>(&low_frequency_)) + sizeof(high_frequency_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Preselectors::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Preselectors*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 low_frequency = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_low_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 high_frequency = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_high_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Preselectors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Preselectors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 low_frequency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 high_frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Preselectors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Preselectors)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Preselectors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Preselectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 low_frequency = 1;
  if (this->low_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->low_frequency(), output);
  }

  // uint32 high_frequency = 2;
  if (this->high_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->high_frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Preselectors)
}

::google::protobuf::uint8* Preselectors::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Preselectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 low_frequency = 1;
  if (this->low_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->low_frequency(), target);
  }

  // uint32 high_frequency = 2;
  if (this->high_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->high_frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Preselectors)
  return target;
}

size_t Preselectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Preselectors)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 low_frequency = 1;
  if (this->low_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_frequency());
  }

  // uint32 high_frequency = 2;
  if (this->high_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preselectors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Preselectors)
  GOOGLE_DCHECK_NE(&from, this);
  const Preselectors* source =
      ::google::protobuf::DynamicCastToGenerated<Preselectors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Preselectors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Preselectors)
    MergeFrom(*source);
  }
}

void Preselectors::MergeFrom(const Preselectors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Preselectors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.low_frequency() != 0) {
    set_low_frequency(from.low_frequency());
  }
  if (from.high_frequency() != 0) {
    set_high_frequency(from.high_frequency());
  }
}

void Preselectors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Preselectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preselectors::CopyFrom(const Preselectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Preselectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preselectors::IsInitialized() const {
  return true;
}

void Preselectors::Swap(Preselectors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preselectors::InternalSwap(Preselectors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(low_frequency_, other->low_frequency_);
  swap(high_frequency_, other->high_frequency_);
}

::google::protobuf::Metadata Preselectors::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_command_2eproto);
  return ::file_level_metadata_command_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::_Command_default_instance_._instance.get_mutable()->preselectors_ = const_cast< ::Preselectors*>(
      ::Preselectors::internal_default_instance());
}
class Command::HasBitSetters {
 public:
  static const ::Preselectors& preselectors(const Command* msg);
};

const ::Preselectors&
Command::HasBitSetters::preselectors(const Command* msg) {
  return *msg->preselectors_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCommandTypeFieldNumber;
const int Command::kAttenuatorFieldNumber;
const int Command::kPreselectorsFieldNumber;
const int Command::kPreamplifierEnebledFieldNumber;
const int Command::kAdcNoiceBlankerEnebledFieldNumber;
const int Command::kAdcNoiceBlankerThresholdFieldNumber;
const int Command::kDdc1FrequencyFieldNumber;
const int Command::kDdc1TypeFieldNumber;
const int Command::kStartDdc1FieldNumber;
const int Command::kSamplesPerBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adc_noice_blanker_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adc_noice_blanker_threshold().size() > 0) {
    adc_noice_blanker_threshold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adc_noice_blanker_threshold_);
  }
  if (from.has_preselectors()) {
    preselectors_ = new ::Preselectors(*from.preselectors_);
  } else {
    preselectors_ = nullptr;
  }
  ::memcpy(&command_type_, &from.command_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&samples_per_buffer_) -
    reinterpret_cast<char*>(&command_type_)) + sizeof(samples_per_buffer_));
  // @@protoc_insertion_point(copy_constructor:Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Command_command_2eproto.base);
  adc_noice_blanker_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&preselectors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samples_per_buffer_) -
      reinterpret_cast<char*>(&preselectors_)) + sizeof(samples_per_buffer_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  SharedDtor();
}

void Command::SharedDtor() {
  adc_noice_blanker_threshold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete preselectors_;
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Command_command_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adc_noice_blanker_threshold_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && preselectors_ != nullptr) {
    delete preselectors_;
  }
  preselectors_ = nullptr;
  ::memset(&command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samples_per_buffer_) -
      reinterpret_cast<char*>(&command_type_)) + sizeof(samples_per_buffer_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .CommandType command_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_command_type(static_cast<::CommandType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 attenuator = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attenuator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .Preselectors preselectors = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Preselectors::_InternalParse;
        object = msg->mutable_preselectors();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool preamplifier_enebled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_preamplifier_enebled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool adc_noice_blanker_enebled = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_adc_noice_blanker_enebled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes adc_noice_blanker_threshold = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_adc_noice_blanker_threshold();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 ddc1_frequency = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_ddc1_frequency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ddc1_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_ddc1_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool start_ddc1 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_start_ddc1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 samples_per_buffer = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_samples_per_buffer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CommandType command_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command_type(static_cast< ::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 attenuator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attenuator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Preselectors preselectors = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preselectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preamplifier_enebled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preamplifier_enebled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool adc_noice_blanker_enebled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adc_noice_blanker_enebled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes adc_noice_blanker_threshold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adc_noice_blanker_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc1_frequency = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc1_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ddc1_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ddc1_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool start_ddc1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_ddc1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 samples_per_buffer = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samples_per_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommandType command_type = 1;
  if (this->command_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command_type(), output);
  }

  // uint32 attenuator = 2;
  if (this->attenuator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attenuator(), output);
  }

  // .Preselectors preselectors = 3;
  if (this->has_preselectors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::preselectors(this), output);
  }

  // bool preamplifier_enebled = 4;
  if (this->preamplifier_enebled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preamplifier_enebled(), output);
  }

  // bool adc_noice_blanker_enebled = 5;
  if (this->adc_noice_blanker_enebled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->adc_noice_blanker_enebled(), output);
  }

  // bytes adc_noice_blanker_threshold = 6;
  if (this->adc_noice_blanker_threshold().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->adc_noice_blanker_threshold(), output);
  }

  // uint32 ddc1_frequency = 7;
  if (this->ddc1_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ddc1_frequency(), output);
  }

  // uint32 ddc1_type = 8;
  if (this->ddc1_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ddc1_type(), output);
  }

  // bool start_ddc1 = 9;
  if (this->start_ddc1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->start_ddc1(), output);
  }

  // uint32 samples_per_buffer = 10;
  if (this->samples_per_buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->samples_per_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommandType command_type = 1;
  if (this->command_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command_type(), target);
  }

  // uint32 attenuator = 2;
  if (this->attenuator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attenuator(), target);
  }

  // .Preselectors preselectors = 3;
  if (this->has_preselectors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::preselectors(this), target);
  }

  // bool preamplifier_enebled = 4;
  if (this->preamplifier_enebled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preamplifier_enebled(), target);
  }

  // bool adc_noice_blanker_enebled = 5;
  if (this->adc_noice_blanker_enebled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->adc_noice_blanker_enebled(), target);
  }

  // bytes adc_noice_blanker_threshold = 6;
  if (this->adc_noice_blanker_threshold().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->adc_noice_blanker_threshold(), target);
  }

  // uint32 ddc1_frequency = 7;
  if (this->ddc1_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ddc1_frequency(), target);
  }

  // uint32 ddc1_type = 8;
  if (this->ddc1_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ddc1_type(), target);
  }

  // bool start_ddc1 = 9;
  if (this->start_ddc1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->start_ddc1(), target);
  }

  // uint32 samples_per_buffer = 10;
  if (this->samples_per_buffer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->samples_per_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes adc_noice_blanker_threshold = 6;
  if (this->adc_noice_blanker_threshold().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->adc_noice_blanker_threshold());
  }

  // .Preselectors preselectors = 3;
  if (this->has_preselectors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preselectors_);
  }

  // .CommandType command_type = 1;
  if (this->command_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_type());
  }

  // uint32 attenuator = 2;
  if (this->attenuator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->attenuator());
  }

  // bool preamplifier_enebled = 4;
  if (this->preamplifier_enebled() != 0) {
    total_size += 1 + 1;
  }

  // bool adc_noice_blanker_enebled = 5;
  if (this->adc_noice_blanker_enebled() != 0) {
    total_size += 1 + 1;
  }

  // bool start_ddc1 = 9;
  if (this->start_ddc1() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ddc1_frequency = 7;
  if (this->ddc1_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc1_frequency());
  }

  // uint32 ddc1_type = 8;
  if (this->ddc1_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ddc1_type());
  }

  // uint32 samples_per_buffer = 10;
  if (this->samples_per_buffer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->samples_per_buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.adc_noice_blanker_threshold().size() > 0) {

    adc_noice_blanker_threshold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adc_noice_blanker_threshold_);
  }
  if (from.has_preselectors()) {
    mutable_preselectors()->::Preselectors::MergeFrom(from.preselectors());
  }
  if (from.command_type() != 0) {
    set_command_type(from.command_type());
  }
  if (from.attenuator() != 0) {
    set_attenuator(from.attenuator());
  }
  if (from.preamplifier_enebled() != 0) {
    set_preamplifier_enebled(from.preamplifier_enebled());
  }
  if (from.adc_noice_blanker_enebled() != 0) {
    set_adc_noice_blanker_enebled(from.adc_noice_blanker_enebled());
  }
  if (from.start_ddc1() != 0) {
    set_start_ddc1(from.start_ddc1());
  }
  if (from.ddc1_frequency() != 0) {
    set_ddc1_frequency(from.ddc1_frequency());
  }
  if (from.ddc1_type() != 0) {
    set_ddc1_type(from.ddc1_type());
  }
  if (from.samples_per_buffer() != 0) {
    set_samples_per_buffer(from.samples_per_buffer());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  adc_noice_blanker_threshold_.Swap(&other->adc_noice_blanker_threshold_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(preselectors_, other->preselectors_);
  swap(command_type_, other->command_type_);
  swap(attenuator_, other->attenuator_);
  swap(preamplifier_enebled_, other->preamplifier_enebled_);
  swap(adc_noice_blanker_enebled_, other->adc_noice_blanker_enebled_);
  swap(start_ddc1_, other->start_ddc1_);
  swap(ddc1_frequency_, other->ddc1_frequency_);
  swap(ddc1_type_, other->ddc1_type_);
  swap(samples_per_buffer_, other->samples_per_buffer_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_command_2eproto);
  return ::file_level_metadata_command_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Answer::InitAsDefaultInstance() {
}
class Answer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Answer::kTypeFieldNumber;
const int Answer::kSuccesedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Answer::Answer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Answer)
}
Answer::Answer(const Answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&succesed_) -
    reinterpret_cast<char*>(&type_)) + sizeof(succesed_));
  // @@protoc_insertion_point(copy_constructor:Answer)
}

void Answer::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succesed_) -
      reinterpret_cast<char*>(&type_)) + sizeof(succesed_));
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
}

void Answer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Answer& Answer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Answer_command_2eproto.base);
  return *internal_default_instance();
}


void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succesed_) -
      reinterpret_cast<char*>(&type_)) + sizeof(succesed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Answer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Answer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .CommandType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::CommandType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool succesed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_succesed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Answer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool succesed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succesed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Answer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommandType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool succesed = 2;
  if (this->succesed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->succesed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Answer)
}

::google::protobuf::uint8* Answer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CommandType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool succesed = 2;
  if (this->succesed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->succesed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Answer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CommandType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool succesed = 2;
  if (this->succesed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const Answer* source =
      ::google::protobuf::DynamicCastToGenerated<Answer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Answer)
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.succesed() != 0) {
    set_succesed(from.succesed());
  }
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::Swap(Answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Answer::InternalSwap(Answer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(succesed_, other->succesed_);
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_command_2eproto);
  return ::file_level_metadata_command_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConnectRequest::InitAsDefaultInstance() {
}
class ConnectRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  type_ = 0;
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
}

void ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectRequest& ConnectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConnectRequest_command_2eproto.base);
  return *internal_default_instance();
}


void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConnectRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ConnectRequest.Type type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::ConnectRequest_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ConnectRequest.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ConnectRequest_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectRequest.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnectRequest)
}

::google::protobuf::uint8* ConnectRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectRequest.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ConnectRequest.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectRequest)
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_command_2eproto);
  return ::file_level_metadata_command_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileRequest::InitAsDefaultInstance() {
}
class FileRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRequest::kFileNameFieldNumber;
const int FileRequest::kFilePositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRequest::FileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  file_position_ = from.file_position_;
  // @@protoc_insertion_point(copy_constructor:FileRequest)
}

void FileRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileRequest_command_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_position_ = PROTOBUF_LONGLONG(0);
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileRequest& FileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileRequest_command_2eproto.base);
  return *internal_default_instance();
}


void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_position_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string file_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("FileRequest.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 file_position = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_file_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileRequest.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 file_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // int64 file_position = 4;
  if (this->file_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->file_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FileRequest)
}

::google::protobuf::uint8* FileRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // int64 file_position = 4;
  if (this->file_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->file_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileRequest)
  return target;
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // int64 file_position = 4;
  if (this->file_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileRequest)
    MergeFrom(*source);
  }
}

void FileRequest::MergeFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_position() != 0) {
    set_file_position(from.file_position());
  }
}

void FileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::Swap(FileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRequest::InternalSwap(FileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_position_, other->file_position_);
}

::google::protobuf::Metadata FileRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_command_2eproto);
  return ::file_level_metadata_command_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Preselectors* Arena::CreateMaybeMessage< ::Preselectors >(Arena* arena) {
  return Arena::CreateInternal< ::Preselectors >(arena);
}
template<> PROTOBUF_NOINLINE ::Command* Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateInternal< ::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::Answer* Arena::CreateMaybeMessage< ::Answer >(Arena* arena) {
  return Arena::CreateInternal< ::Answer >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectRequest* Arena::CreateMaybeMessage< ::ConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FileRequest* Arena::CreateMaybeMessage< ::FileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::FileRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
