#include <QDebug>
#include <QThread>
#include <QLibrary>
#include "direct_receiver.h"
#include "src/receiver/callback/g35_coherent_callbak.h"
#include "device_info.pb.h"

#include "base_info.pb.h"
#include "signal.pb.h"

///#define PATH_TO_LIBRARY "C:\\Qt\\lib\\G35DDCAPI"
///#define PATH_TO_LIBRARY1 "lib\G35DDCAPI"

#define PATH_TO_LIBRARY "G35DDCAPI"

#define SLEEP_TIME 100

CoherentReceiverControl::CoherentReceiverControl()
{
    library=new QLibrary(PATH_TO_LIBRARY);
    if(library->load()){
        qDebug()<<"Library G35DDCAPI.dll is load";
        createInstance=(G3XDDCAPI_CREATE_INSTANCE)library->resolve("CreateInstance");
    }else qDebug()<<"Library G35DDCAPI.dll is not load";
}

int  CoherentReceiverControl::getCountDeviceSet(){
    if(createInstance(G35DDC_CLASS_ID_COH_DEVICE_SET_ENUMERATOR,(void**)&Enumerator))
    {
        Enumerator->Enumerate();
        return Enumerator->GetDeviceSetCount();
    }else  return 0;
}

int CoherentReceiverControl::getCountDeviceInDeviceSet(int numberDeviceSet){
    quint32 deviceCount;
    getCohDeviceSet(numberDeviceSet)->GetDeviceCount(&deviceCount);
    return deviceCount;
}

///QMap<int,DeviceSetInfo> *DirectReceiver::getActiveDeviceSet(){    return &deviceSetInfoMap; }
QMap<int,ICohG35DDCDeviceSet*> *CoherentReceiverControl::getActiveDeviceSetMap(){
    return &deviceSetMap;
}

ICohG35DDCDeviceSet* CoherentReceiverControl::getCohDeviceSet(int numberDeviceSet){
    /// return deviceSetInfoMap[numberDeviceSet].cohG35DDCDeviceSet;
    return deviceSetMap[numberDeviceSet];
}

void CoherentReceiverControl::openDeviceSet(int numberDeviceSet){
    ICohG35DDCDeviceSet *deviceSet;
    G35DDC_DEVICE_INFO *deviceInfoMas,deviceInfo;
    unsigned int countDeviceInSet=0;

    if(!deviceSetMap.contains(numberDeviceSet)){
        createInstance(G35DDC_CLASS_ID_COH_DEVICE_SET,(void**)&deviceSet);
        G35CoherentCallbak *g35CoherentCallbak=new G35CoherentCallbak;
        deviceSet->SetCallback(g35CoherentCallbak);
        deviceSetMap.insert(numberDeviceSet,deviceSet);
        streamDDCMap.insert(numberDeviceSet,false);
    }else deviceSet=getCohDeviceSet(numberDeviceSet);

    Enumerator->GetDeviceSetInfo(numberDeviceSet,NULL,&countDeviceInSet);
    deviceInfoMas=new G35DDC_DEVICE_INFO[countDeviceInSet];
    Enumerator->GetDeviceSetInfo(numberDeviceSet,deviceInfoMas,&countDeviceInSet);
    qDebug()<<library->dynamicPropertyNames();
    if(deviceSet->Open(deviceInfoMas,countDeviceInSet)){
        qDebug()<<"Open Device Set - count device:"<<countDeviceInSet;
        deviceSet->GetDeviceInfo(0,&deviceInfo);
        qDebug()<<"|_________SerialNumber:" <<deviceInfoMas[0].SerialNumber<<deviceInfo.SerialNumber;
        deviceSet->GetDeviceInfo(1,&deviceInfo);
        qDebug()<<"|_________SerialNumber:" <<deviceInfoMas[1].SerialNumber<<deviceInfo.SerialNumber;
    }else qDebug()<<"Device is not open";
}

void CoherentReceiverControl::closeDeviceSet(int numberDeviceSet){
    qDebug()<<"Close Device";
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    ///G35CoherentCallbak *g35CoherentCallbak= dynamic_cast<G35CoherentCallbak*>(deviceSet->GetCallback());
    ///g35CoherentCallbak->stopReceive();
    deviceSet->Close();
}

void CoherentReceiverControl::setPowerDeviceSet(int numberDeviceSet, bool power){
    ICohG35DDCDeviceSet *deviceSet/*/=getCohDeviceSet(numberDeviceSet)/*/;
    if(power==0){
        qDebug()<<"Device OFF";
        if(streamDDCMap[numberDeviceSet]){
            qDebug()<<"Stream DDC is LIVE";
        stopDDC1Strem(numberDeviceSet);
        }else qDebug()<<"Stream DDC is not LIVE";

        deviceSet=getCohDeviceSet(numberDeviceSet);
        deviceSet->SetPower(power);
        closeDeviceSet(numberDeviceSet);
    }else {
        qDebug()<<"Device ON";
        openDeviceSet(numberDeviceSet);
        deviceSet=getCohDeviceSet(numberDeviceSet);
        deviceSet->SetPower(power);
    }
    Sleep(SLEEP_TIME);
}

void CoherentReceiverControl::startDDC1Stream(int numberDeviceSet,quint32 samplesPerBuffer){
    qDebug()<<"Start DDC1 Streaming";
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    dynamic_cast<G35CoherentCallbak*>(deviceSet->GetCallback())->startReceive(numberDeviceSet);
    deviceSet->StartDDC1(samplesPerBuffer);
    streamDDCMap[numberDeviceSet]=true;
    Sleep(SLEEP_TIME);
}

void CoherentReceiverControl::stopDDC1Strem(int numberDeviceSet){
    qDebug()<<"Stop DDC1 Streaming";
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    dynamic_cast<G35CoherentCallbak*>(deviceSet->GetCallback())->stopReceive();
    deviceSet->StopDDC1();
    streamDDCMap[numberDeviceSet]=false;
    Sleep(SLEEP_TIME);
    ///emit finished();
}

BaseInfo *CoherentReceiverControl::baseDeviceSetInfo(int numberDeviceSet){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    BaseInfo *baseInfo=new BaseInfo;

    quint32 attenuationDbLevel;
    deviceSet->GetAttenuator(&attenuationDbLevel);
    Preselector *preselector=new Preselector;
    quint32 lowFrequency,highFrequency;
    deviceSet->GetPreselectors(&lowFrequency,&highFrequency);

    bool preamplifireEnabled;
    deviceSet->GetPreamp((BOOL*)&preamplifireEnabled);

    ADCNoiseBlanker *adcNoiseBlanker=new ADCNoiseBlanker;
    bool enabled;
    quint16 *threshold=new quint16;
    deviceSet->GetADCNoiseBlanker((BOOL*)&enabled);
    deviceSet->GetADCNoiseBlankerThreshold(threshold);

    bool spectrumIfInvertet;
    deviceSet->GetInverted((BOOL*)&spectrumIfInvertet);

    DDCInfo *ddcInfo=new DDCInfo;
    DDC1 *ddc1=new DDC1;
    quint32 countDDCType,ddcTypeIndex;
    G3XDDC_DDC_INFO ddcInfoR;
    deviceSet->GetDDC1Count(&countDDCType);
    deviceSet->GetDDC1(&ddcTypeIndex,&ddcInfoR);
    ddcInfo->set_sample_rate(ddcInfoR.SampleRate);
    ddcInfo->set_bandwidth(ddcInfoR.Bandwidth);
    ddcInfo->set_bits_per_sample(ddcInfoR.BitsPerSample);

    baseInfo->set_attenuation_db_level(attenuationDbLevel);

    preselector->set_low_frequency(lowFrequency);
    preselector->set_high_frequency(highFrequency);
    baseInfo->set_allocated_preselector(preselector);

    baseInfo->set_preamplifier_enabled(preamplifireEnabled);

    adcNoiseBlanker->set_enabled(enabled);
    adcNoiseBlanker->set_threshold((void*)threshold,sizeof(*threshold));
    baseInfo->set_allocated_adc_noise_blanker(adcNoiseBlanker);

    baseInfo->set_spectrum_if_inverted(spectrumIfInvertet);

    ddc1->set_count_ddc_of_types_supported_by_ddc1(countDDCType);
    ddc1->set_ddc_type_index(ddcTypeIndex);
    ddc1->set_allocated_ddc_info(ddcInfo);
    baseInfo->set_allocated_ddc1(ddc1);
    return baseInfo;
}

DeviceInfo *CoherentReceiverControl::getDeviceInfo(int numberDeviceSet, int numberDevice){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    G35DDC_DEVICE_INFO g35DeviceInfo;
    deviceSet->GetDeviceInfo(numberDevice,&g35DeviceInfo);
    DeviceInfo *deviceInfo=new DeviceInfo;

    deviceInfo->set_device_path(g35DeviceInfo.DevicePath);
    deviceInfo->set_serial_number(g35DeviceInfo.SerialNumber);

    deviceInfo->set_interface_type((void*)&(g35DeviceInfo.InterfaceType),sizeof(g35DeviceInfo.InterfaceType));
    qDebug()<<"InterfaceType:"<<g35DeviceInfo.InterfaceType<<sizeof(g35DeviceInfo.InterfaceType);
    deviceInfo->set_hardware_version((void*)&(g35DeviceInfo.HWVersion),sizeof(g35DeviceInfo.HWVersion));
    qDebug()<<"Hmwersion"<<g35DeviceInfo.HWVersion<<sizeof(g35DeviceInfo.HWVersion);
    deviceInfo->set_firmware_version((void*)&(g35DeviceInfo.FWVersion),sizeof(g35DeviceInfo.FWVersion));
    qDebug()<<"Fmversion"<<g35DeviceInfo.FWVersion<<sizeof(g35DeviceInfo.FWVersion);
    deviceInfo->set_eeprom_version((void*)&(g35DeviceInfo.EEPROMVersion),sizeof(g35DeviceInfo.EEPROMVersion));
    qDebug()<<"EEpromVersion"<<g35DeviceInfo.EEPROMVersion<<sizeof(g35DeviceInfo.EEPROMVersion);

    deviceInfo->set_channel_count(g35DeviceInfo.ChannelCount);
    deviceInfo->set_ddc_type_count(g35DeviceInfo.DDCTypeCount);

    return deviceInfo;
}

bool CoherentReceiverControl::getDDC1Count(int numberDeviceSet,quint32 *ddc1Count){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetDDC1Count(ddc1Count);
}

bool CoherentReceiverControl::setAttenuator(int numberDeviceSet, quint32 attenuationDbLevel){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->SetAttenuator(attenuationDbLevel);
}

bool CoherentReceiverControl::getAttenuator(int numberDeviceSet, quint32 *attenuationDbLevel){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetAttenuator(attenuationDbLevel);
}

bool CoherentReceiverControl::setPreselectors(int numberDeviceSet, quint32 lowFrequency, quint32 highFrequency){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->SetPreselectors(lowFrequency,highFrequency);
}

bool CoherentReceiverControl::getPreselectors(int numberDeviceSet, quint32 *lowFrequency, quint32 *highFrequency){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetPreselectors(lowFrequency,highFrequency);
}

bool CoherentReceiverControl::setPreamplifier(int numberDeviceSet, bool preamplifier){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->SetPreamp(preamplifier);
}

bool CoherentReceiverControl::getPreamplifier(int numberDeviceSet, bool *preamplifier){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetPreamp((BOOL*)preamplifier);
}

bool CoherentReceiverControl::setADCNoiseBlanker(int numberDeviceSet, bool enabled){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->SetADCNoiseBlanker(enabled);
}

bool CoherentReceiverControl::getADCNoiceBlanker(int numberDeviceSet, bool *enabled){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetADCNoiseBlanker((BOOL*)enabled);
}

bool CoherentReceiverControl::setADCNoiseBlankerThreshold(int numberDeviceSet, unsigned short threshold){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->SetADCNoiseBlankerThreshold(threshold);
}

bool CoherentReceiverControl::getADCNoiseBlankerThreshold(int numberDeviceSet, unsigned short *threshold){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetADCNoiseBlankerThreshold(threshold);
}

bool CoherentReceiverControl::setFrequencySpectrumInverted(int numberDeviceSet, bool inverted){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetInverted((BOOL*)inverted);
}

bool CoherentReceiverControl::getFrequencySpectrumInverted(int numberDeviceSet, bool *inverted){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->GetInverted((BOOL*)inverted);
}

////***************SETTERS DDC1
bool CoherentReceiverControl::setDDC1(int numberDeviceSet,quint32 ddcTypeIndex){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    bool val= deviceSet->SetDDC1(ddcTypeIndex);
    Sleep(SLEEP_TIME);
    return val;
}

bool CoherentReceiverControl::setDDC1Frequency(int numberDeviceSet,int frequencyDDC1){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    bool val=  deviceSet->SetDDC1Frequency(frequencyDDC1);
    Sleep(SLEEP_TIME);
    return val;
}

bool CoherentReceiverControl::setDDC1PhaseShift(int numberDeviceSet, int deviceIndex, double phaseShift){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    return deviceSet->SetDDC1PhaseShift(deviceIndex,phaseShift);
}

CoherentReceiverControl::~CoherentReceiverControl(){
    library->unload();
    library->deleteLater();
    ///delete Enumerator;
}

///*************************************DEL***********************************

/*/
void DirectReceiver::startDDC1Stream(int numberDeviceSet){
   /// if(g35CoherentCallbak!=NULL)delete g35CoherentCallbak;
    thread =new QThread;
    this->moveToThread(thread);
    connect(thread,&QThread::started,this,&DirectReceiver::startDDC1StreamThread);
    ///connect(this,&DirectReceiver::finished,thread,&QThread::quit);///СДЕЛАТЬ ОСТАНОВКУ ПОТОКА
    ///connect(thread,&QThread::finished,thread,&QThread::deleteLater);
    thread->start();
    ///startDDC1StreamThread();
    }
/*/

void CoherentReceiverControl::startDDC1StreamThread(){
    /*/qDebug()<<"Start DDC1 Streaming";
    ICohG35DDCDeviceSet *deviceSet=deviceSetInfoMap[numberDeviceSet].cohG35DDCDeviceSet;
    g35CoherentCallbak=new G35CoherentCallbak;
    deviceSet->SetCallback(g35CoherentCallbak);
    connect(g35CoherentCallbak,&G35CoherentCallbak::sendedDDC1Stream,this,&DirectReceiver::sendedDDC1Stream);
   /// QThread::sleep(1);
    Sleep(100);
    deviceSet->StartDDC1(samplesPerBuffer);/*/
}

/*/
void DirectReceiver::openDeviceSet(int numberDeviceSet){
    ICohG35DDCDeviceSet *deviceSet=getCohDeviceSet(numberDeviceSet);
    DeviceSetInfo &deviceSetInfo=deviceSetInfoMap[numberDeviceSet];
    if(deviceSet->Open(deviceSetInfo.deviceInfoMas,deviceSetInfo.countDevices)){
        deviceSet->SetDDC1(0);
        Sleep(SLEEP_TIME);
        qDebug()<<"Open Device";
        G35CoherentCallbak *g35CoherentCallbak=new G35CoherentCallbak;
        deviceSet->SetCallback(g35CoherentCallbak);
        connect(g35CoherentCallbak,&G35CoherentCallbak::sendedDDC1Stream,this,&DirectReceiver::sendedDDC1Stream);
        ///connect(this,&DirectReceiver::startedDDC1Stream,this,&DirectReceiver::startDDC1Stream);///DEL
        ///connect(this,&DirectReceiver::stopedDDC1Strem,this,&DirectReceiver::stopDDC1Strem);///DEL
        printf("SerialNumber %s:\n",deviceSetInfo.deviceInfoMas[0].SerialNumber);
        printf("SerialNumber %s:\n",deviceSetInfo.deviceInfoMas[1].SerialNumber);
    }else qDebug()<<"Device is not open";
}
/*/
